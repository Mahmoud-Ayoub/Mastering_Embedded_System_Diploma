
STM32F103xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010c0  080010c0  000110c8  2**0
                  CONTENTS
  4 .ARM          00000000  080010c0  080010c0  000110c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c0  080010c8  000110c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c0  080010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  080010c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080010c8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c4f  00000000  00000000  000110f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000100a  00000000  00000000  00017d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011fa  00000000  00000000  00018d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c0  00000000  00000000  00019f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  0001a208  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002dfc  00000000  00000000  0001a440  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000032d5  00000000  00000000  0001d23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c21f  00000000  00000000  00020511  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c730  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000090c  00000000  00000000  0002c7ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010a0 	.word	0x080010a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010a0 	.word	0x080010a0

08000170 <HAL_EEPROM_Init>:
 *
 *      Author: Mahmoud Ayoub
 */
#include "I2C_Slave_EEPROM.h"

void HAL_EEPROM_Init (void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	I2C_Config_t eeprom_cfg ;
	eeprom_cfg.Ack_control = I2C_Ack_ENABLE ;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	61bb      	str	r3, [r7, #24]
	eeprom_cfg.clock_speed = I2C_CLK_SM_100k ;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <HAL_EEPROM_Init+0x34>)
 800017e:	603b      	str	r3, [r7, #0]
	eeprom_cfg.I2C_mode = I2C_MODE_I2C ;
 8000180:	2300      	movs	r3, #0
 8000182:	60bb      	str	r3, [r7, #8]
	eeprom_cfg.p_slave_callback = NULL ;
 8000184:	2300      	movs	r3, #0
 8000186:	61fb      	str	r3, [r7, #28]
	eeprom_cfg.clock_stretch_mode = I2C_CLK_STRETCH_ENABLE ;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]
	MCAL_I2C_GPIO_Pins(I2C1) ;
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800018e:	f000 fba3 	bl	80008d8 <MCAL_I2C_GPIO_Pins>
	MCAL_I2C_Init(I2C1, &eeprom_cfg) ;
 8000192:	463b      	mov	r3, r7
 8000194:	4619      	mov	r1, r3
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000198:	f000 fa96 	bl	80006c8 <MCAL_I2C_Init>
}
 800019c:	bf00      	nop
 800019e:	3720      	adds	r7, #32
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	000186a0 	.word	0x000186a0
 80001a8:	40005400 	.word	0x40005400

080001ac <HAL_EEPROM_Write>:

uint8_t HAL_EEPROM_Write (uint32_t Memory_Address, uint8_t *data_buffer, uint32_t datalen) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b0c8      	sub	sp, #288	; 0x120
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	f107 030c 	add.w	r3, r7, #12
 80001b6:	6018      	str	r0, [r3, #0]
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	601a      	str	r2, [r3, #0]
	int i = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t Buffer[256];
	Buffer[0] = (uint8_t)(Memory_Address >> 8);		//upper eeprom address
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (uint8_t)(Memory_Address);			//lower eeprom address
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	705a      	strb	r2, [r3, #1]
	for (i=2 ; i<(datalen+2) ; i++) {
 80001e6:	2302      	movs	r3, #2
 80001e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80001ec:	e013      	b.n	8000216 <HAL_EEPROM_Write+0x6a>
		Buffer[i] = data_buffer[i-2] ;
 80001ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80001f2:	3b02      	subs	r3, #2
 80001f4:	f107 0208 	add.w	r2, r7, #8
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	4413      	add	r3, r2
 80001fc:	7819      	ldrb	r1, [r3, #0]
 80001fe:	f107 0214 	add.w	r2, r7, #20
 8000202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000206:	4413      	add	r3, r2
 8000208:	460a      	mov	r2, r1
 800020a:	701a      	strb	r2, [r3, #0]
	for (i=2 ; i<(datalen+2) ; i++) {
 800020c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000210:	3301      	adds	r3, #1
 8000212:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	1c9a      	adds	r2, r3, #2
 800021c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000220:	429a      	cmp	r2, r3
 8000222:	d8e4      	bhi.n	80001ee <HAL_EEPROM_Write+0x42>
	}

	MCAL_I2C_Master_Tx(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, datalen+2, with_stop, non_repeated_start) ;
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1c99      	adds	r1, r3, #2
 800022a:	f107 0214 	add.w	r2, r7, #20
 800022e:	2301      	movs	r3, #1
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2301      	movs	r3, #1
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	212a      	movs	r1, #42	; 0x2a
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <HAL_EEPROM_Write+0xa0>)
 800023c:	f000 fb96 	bl	800096c <MCAL_I2C_Master_Tx>
	return 0 ;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40005400 	.word	0x40005400

08000250 <HAL_EEPROM_Read>:

uint8_t HAL_EEPROM_Read (uint32_t Memory_Address, uint8_t *data_buffer, uint32_t datalen) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
	uint8_t Buffer[2];
	Buffer[0] = (uint8_t)(Memory_Address >> 8);		//upper eeprom address
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	0a1b      	lsrs	r3, r3, #8
 8000260:	b2db      	uxtb	r3, r3
 8000262:	753b      	strb	r3, [r7, #20]
	Buffer[1] = (uint8_t)(Memory_Address);			//lower eeprom address
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	757b      	strb	r3, [r7, #21]
	MCAL_I2C_Master_Tx(I2C1, EEPROM_SLAVE_ADDRESS, Buffer, 2, without_stop, non_repeated_start);
 800026a:	f107 0214 	add.w	r2, r7, #20
 800026e:	2301      	movs	r3, #1
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2300      	movs	r3, #0
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2302      	movs	r3, #2
 8000278:	212a      	movs	r1, #42	; 0x2a
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <HAL_EEPROM_Read+0x50>)
 800027c:	f000 fb76 	bl	800096c <MCAL_I2C_Master_Tx>
	MCAL_I2C_Master_Rx(I2C1, EEPROM_SLAVE_ADDRESS, data_buffer, datalen, with_stop, repeated_start);
 8000280:	2300      	movs	r3, #0
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <HAL_EEPROM_Read+0x50>)
 8000290:	f000 fbc0 	bl	8000a14 <MCAL_I2C_Master_Rx>
	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE() ;
	NVIC_IRQ40_EXTI10_15_DISABLE() ;
}

// ----------------------------------------- ISR Functions -----------------------------------------
void EXTI0_IRQHandler (void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 0) ;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]() ;
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4798      	blx	r3

}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010400 	.word	0x40010400
 80002c4:	20000070 	.word	0x20000070

080002c8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 1) ;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]() ;
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI1_IRQHandler+0x20>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000070 	.word	0x20000070

080002ec <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 2) ;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]() ;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x20>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000070 	.word	0x20000070

08000310 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 3) ;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI3_IRQHandler+0x1c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]() ;
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI3_IRQHandler+0x20>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000070 	.word	0x20000070

08000334 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 4) ;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]() ;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI4_IRQHandler+0x20>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000070 	.word	0x20000070

08000358 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI9_5_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 5) ;
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[5]() ;
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 6)) {
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI9_5_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 6) ;
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[6]() ;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 7)) {
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <EXTI9_5_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 7) ;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[7]() ;
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 8)) {
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 8) ;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003cc:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[8]() ;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 9)) {
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI9_5_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 9) ;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[9]() ;
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4798      	blx	r3
	}
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000070 	.word	0x20000070

08000400 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI15_10_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 10) ;
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[10]() ;
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <EXTI15_10_IRQHandler+0xa4>)
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 11)) {
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <EXTI15_10_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 11) ;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000438:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[11]() ;
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <EXTI15_10_IRQHandler+0xa4>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 12)) {
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <EXTI15_10_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 12) ;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[12]() ;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <EXTI15_10_IRQHandler+0xa4>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 13)) {
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <EXTI15_10_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 13) ;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[13]() ;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <EXTI15_10_IRQHandler+0xa4>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 14)) {
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d008      	beq.n	800049a <EXTI15_10_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 14) ;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <EXTI15_10_IRQHandler+0xa0>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[14]() ;
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <EXTI15_10_IRQHandler+0xa4>)
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4798      	blx	r3
	}
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010400 	.word	0x40010400
 80004a4:	20000070 	.word	0x20000070

080004a8 <GPIO_CRLH_GetPosition>:
 *
 *      Author: Mahmoud Ayoub
 */
#include "GPIO.h"

static GPIO_CRLH_GetPosition (uint16_t PinNumber) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	2b80      	cmp	r3, #128	; 0x80
 80004b6:	d042      	beq.n	800053e <GPIO_CRLH_GetPosition+0x96>
 80004b8:	2b80      	cmp	r3, #128	; 0x80
 80004ba:	dc11      	bgt.n	80004e0 <GPIO_CRLH_GetPosition+0x38>
 80004bc:	2b08      	cmp	r3, #8
 80004be:	d036      	beq.n	800052e <GPIO_CRLH_GetPosition+0x86>
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	dc06      	bgt.n	80004d2 <GPIO_CRLH_GetPosition+0x2a>
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d02e      	beq.n	8000526 <GPIO_CRLH_GetPosition+0x7e>
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d02e      	beq.n	800052a <GPIO_CRLH_GetPosition+0x82>
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d028      	beq.n	8000522 <GPIO_CRLH_GetPosition+0x7a>
 80004d0:	e047      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
 80004d2:	2b20      	cmp	r3, #32
 80004d4:	d02f      	beq.n	8000536 <GPIO_CRLH_GetPosition+0x8e>
 80004d6:	2b40      	cmp	r3, #64	; 0x40
 80004d8:	d02f      	beq.n	800053a <GPIO_CRLH_GetPosition+0x92>
 80004da:	2b10      	cmp	r3, #16
 80004dc:	d029      	beq.n	8000532 <GPIO_CRLH_GetPosition+0x8a>
 80004de:	e040      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
 80004e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004e4:	d033      	beq.n	800054e <GPIO_CRLH_GetPosition+0xa6>
 80004e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ea:	dc09      	bgt.n	8000500 <GPIO_CRLH_GetPosition+0x58>
 80004ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004f0:	d029      	beq.n	8000546 <GPIO_CRLH_GetPosition+0x9e>
 80004f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f6:	d028      	beq.n	800054a <GPIO_CRLH_GetPosition+0xa2>
 80004f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004fc:	d021      	beq.n	8000542 <GPIO_CRLH_GetPosition+0x9a>
 80004fe:	e030      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
 8000500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000504:	d027      	beq.n	8000556 <GPIO_CRLH_GetPosition+0xae>
 8000506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050a:	dc03      	bgt.n	8000514 <GPIO_CRLH_GetPosition+0x6c>
 800050c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000510:	d01f      	beq.n	8000552 <GPIO_CRLH_GetPosition+0xaa>
 8000512:	e026      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
 8000514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000518:	d01f      	beq.n	800055a <GPIO_CRLH_GetPosition+0xb2>
 800051a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800051e:	d01e      	beq.n	800055e <GPIO_CRLH_GetPosition+0xb6>
 8000520:	e01f      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
	case GPIO_PIN_0 :
		return 0 ;
 8000522:	2300      	movs	r3, #0
 8000524:	e01d      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 8000526:	2304      	movs	r3, #4
 8000528:	e01b      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 800052a:	2308      	movs	r3, #8
 800052c:	e019      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 800052e:	230c      	movs	r3, #12
 8000530:	e017      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000532:	2310      	movs	r3, #16
 8000534:	e015      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8000536:	2314      	movs	r3, #20
 8000538:	e013      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 800053a:	2318      	movs	r3, #24
 800053c:	e011      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 800053e:	231c      	movs	r3, #28
 8000540:	e00f      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8000542:	2300      	movs	r3, #0
 8000544:	e00d      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000546:	2304      	movs	r3, #4
 8000548:	e00b      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 800054a:	2308      	movs	r3, #8
 800054c:	e009      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 800054e:	230c      	movs	r3, #12
 8000550:	e007      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000552:	2310      	movs	r3, #16
 8000554:	e005      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000556:	2314      	movs	r3, #20
 8000558:	e003      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 800055a:	2318      	movs	r3, #24
 800055c:	e001      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 800055e:	231c      	movs	r3, #28
 8000560:	e7ff      	b.n	8000562 <GPIO_CRLH_GetPosition+0xba>
		break ;
	}
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <MCAL_GPIO_Init>:
 * 		@return value	-	none
 * 		Note			-	STM32F103C6 has GPIO A,B,C,D,E,F,G Modules
 * 							But LQFP48 Package has only GPIO A , B , part of C , part of D
 *
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig) {
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]

	uint8_t Pin_Config_Value = 0 ;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]

	// Port Configuration register Low (GPIOx_CRL) configure PINS from 0 to 7
	// Port Configuration register High (GPIOx_CRH) configure PINS from 8 to 15
	volatile uint32_t* ConfigReg = NULL ;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	2bff      	cmp	r3, #255	; 0xff
 8000584:	d801      	bhi.n	800058a <MCAL_GPIO_Init+0x1e>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	e001      	b.n	800058e <MCAL_GPIO_Init+0x22>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3304      	adds	r3, #4
 800058e:	60bb      	str	r3, [r7, #8]

	// clear CNF and MODE
	(*ConfigReg) &= ~ (0xF << GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff87 	bl	80004a8 <GPIO_CRLH_GetPosition>
 800059a:	4602      	mov	r2, r0
 800059c:	230f      	movs	r3, #15
 800059e:	4093      	lsls	r3, r2
 80005a0:	43da      	mvns	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	401a      	ands	r2, r3
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN) || (PinConfig->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPEN_DRAIN) ) {
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	2b07      	cmp	r3, #7
 80005b2:	d00b      	beq.n	80005cc <MCAL_GPIO_Init+0x60>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d007      	beq.n	80005cc <MCAL_GPIO_Init+0x60>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d003      	beq.n	80005cc <MCAL_GPIO_Init+0x60>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d11c      	bne.n	8000606 <MCAL_GPIO_Init+0x9a>
		// Set CNF and MODE
		Pin_Config_Value = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	3b04      	subs	r3, #4
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	b25a      	sxtb	r2, r3
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	78db      	ldrb	r3, [r3, #3]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 030f 	and.w	r3, r3, #15
 80005e6:	73fb      	strb	r3, [r7, #15]
		(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80005e8:	7bfc      	ldrb	r4, [r7, #15]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff5a 	bl	80004a8 <GPIO_CRLH_GetPosition>
 80005f4:	4603      	mov	r3, r0
 80005f6:	fa04 f203 	lsl.w	r2, r4, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	431a      	orrs	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e05c      	b.n	80006c0 <MCAL_GPIO_Init+0x154>
	}
	// if pin is input
	else {
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)) {
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d003      	beq.n	8000616 <MCAL_GPIO_Init+0xaa>
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d115      	bne.n	8000642 <MCAL_GPIO_Init+0xd6>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000624:	7bfc      	ldrb	r4, [r7, #15]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff3c 	bl	80004a8 <GPIO_CRLH_GetPosition>
 8000630:	4603      	mov	r3, r0
 8000632:	fa04 f203 	lsl.w	r2, r4, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e03e      	b.n	80006c0 <MCAL_GPIO_Init+0x154>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b08      	cmp	r3, #8
 8000648:	d115      	bne.n	8000676 <MCAL_GPIO_Init+0x10a>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 030f 	and.w	r3, r3, #15
 8000656:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000658:	7bfc      	ldrb	r4, [r7, #15]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff22 	bl	80004a8 <GPIO_CRLH_GetPosition>
 8000664:	4603      	mov	r3, r0
 8000666:	fa04 f203 	lsl.w	r2, r4, r3
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	431a      	orrs	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	601a      	str	r2, [r3, #0]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;

		}
	}

}
 8000674:	e024      	b.n	80006c0 <MCAL_GPIO_Init+0x154>
			Pin_Config_Value = ( (((GPIO_MODE_INPUT_PULL_UP) << 2) | (0x0)) & 0x0F ) ;
 8000676:	2308      	movs	r3, #8
 8000678:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULL_UP) {
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d107      	bne.n	8000692 <MCAL_GPIO_Init+0x126>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	8812      	ldrh	r2, [r2, #0]
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	e007      	b.n	80006a2 <MCAL_GPIO_Init+0x136>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	8812      	ldrh	r2, [r2, #0]
 800069a:	43d2      	mvns	r2, r2
 800069c:	401a      	ands	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60da      	str	r2, [r3, #12]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80006a2:	7bfc      	ldrb	r4, [r7, #15]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fefd 	bl	80004a8 <GPIO_CRLH_GetPosition>
 80006ae:	4603      	mov	r3, r0
 80006b0:	fa04 f203 	lsl.w	r2, r4, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	e7ff      	b.n	80006c0 <MCAL_GPIO_Init+0x154>
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}

080006c8 <MCAL_I2C_Init>:
 * 						 	I2Cx configurations required
 * 		@param[out]		-	none
 * 		@return value	-	none
 * 		Note			-	Configuration MACROS can be found in I2C.h
 */
void MCAL_I2C_Init (I2C_TypeDef* I2Cx , I2C_Config_t* I2C_Cfg) {
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
		• 2 MHz in Sm mode
		• 4 MHz in Fm mode
	 *
	 */

	uint16_t tempreg = 0 ;
 80006d2:	2300      	movs	r3, #0
 80006d4:	82fb      	strh	r3, [r7, #22]
	uint16_t freq_value = 0 ;
 80006d6:	2300      	movs	r3, #0
 80006d8:	82bb      	strh	r3, [r7, #20]
	uint16_t CCR_result = 0 ;
 80006da:	2300      	movs	r3, #0
 80006dc:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 8000000 ;
 80006de:	4b75      	ldr	r3, [pc, #468]	; (80008b4 <MCAL_I2C_Init+0x1ec>)
 80006e0:	60fb      	str	r3, [r7, #12]

	// Enable RCC
	if (I2Cx == I2C1) {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a74      	ldr	r2, [pc, #464]	; (80008b8 <MCAL_I2C_Init+0x1f0>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d110      	bne.n	800070c <MCAL_I2C_Init+0x44>
		CLK_EN_I2C1() ;
 80006ea:	4b74      	ldr	r3, [pc, #464]	; (80008bc <MCAL_I2C_Init+0x1f4>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a73      	ldr	r2, [pc, #460]	; (80008bc <MCAL_I2C_Init+0x1f4>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	61d3      	str	r3, [r2, #28]
		g_I2C_Cfg[I2C1_index] = *I2C_Cfg ;
 80006f6:	4a72      	ldr	r2, [pc, #456]	; (80008c0 <MCAL_I2C_Init+0x1f8>)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	4614      	mov	r4, r2
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800070a:	e010      	b.n	800072e <MCAL_I2C_Init+0x66>
	}
	else {
		CLK_EN_I2C2() ;
 800070c:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <MCAL_I2C_Init+0x1f4>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a6a      	ldr	r2, [pc, #424]	; (80008bc <MCAL_I2C_Init+0x1f4>)
 8000712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000716:	61d3      	str	r3, [r2, #28]
		g_I2C_Cfg[I2C2_index] = *I2C_Cfg ;
 8000718:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <MCAL_I2C_Init+0x1f8>)
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	f103 0420 	add.w	r4, r3, #32
 8000720:	4615      	mov	r5, r2
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800072a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (I2C_Cfg->I2C_mode == I2C_MODE_I2C) {
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 80ba 	bne.w	80008ac <MCAL_I2C_Init+0x1e4>

		// • Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
		// init timing
		tempreg = I2Cx->CR2 ;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	82fb      	strh	r3, [r7, #22]

		// clear freq bits in CR2 register
		I2Cx->CR2 &= ~(I2C_CR2_FREQ_Msk) ;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	605a      	str	r2, [r3, #4]

		// get pclk1
		pclk1 = MCAL_RCC_Get_PClk1_Freq() ;
 800074a:	f000 fb4b 	bl	8000de4 <MCAL_RCC_Get_PClk1_Freq>
 800074e:	60f8      	str	r0, [r7, #12]

		// assign freq value in CR2 register
		freq_value = (uint16_t)(pclk1 / 1000000) ;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4a5c      	ldr	r2, [pc, #368]	; (80008c4 <MCAL_I2C_Init+0x1fc>)
 8000754:	fba2 2303 	umull	r2, r3, r2, r3
 8000758:	0c9b      	lsrs	r3, r3, #18
 800075a:	82bb      	strh	r3, [r7, #20]

		tempreg |= freq_value ;
 800075c:	8afa      	ldrh	r2, [r7, #22]
 800075e:	8abb      	ldrh	r3, [r7, #20]
 8000760:	4313      	orrs	r3, r2
 8000762:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = tempreg ;
 8000764:	8afa      	ldrh	r2, [r7, #22]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	605a      	str	r2, [r3, #4]

		// • Configure the clock control registers in I2C_CCR  " CCR = (pclk1) / (2 * i2c_clk) "

		// make sure that i2c peripheral is disabled
		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f023 0201 	bic.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]

		tempreg = 0 ;
 8000776:	2300      	movs	r3, #0
 8000778:	82fb      	strh	r3, [r7, #22]

		// check for clock speed mode
		if ( (I2C_Cfg->clock_speed == I2C_CLK_SM_50k) || (I2C_Cfg->clock_speed == I2C_CLK_SM_100k) ) {
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000782:	4293      	cmp	r3, r2
 8000784:	d004      	beq.n	8000790 <MCAL_I2C_Init+0xc8>
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <MCAL_I2C_Init+0x200>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d112      	bne.n	80007b6 <MCAL_I2C_Init+0xee>
			CCR_result = (uint16_t)(pclk1 / (I2C_Cfg->clock_speed << 1) ) ;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	827b      	strh	r3, [r7, #18]
			tempreg |= CCR_result ;
 800079e:	8afa      	ldrh	r2, [r7, #22]
 80007a0:	8a7b      	ldrh	r3, [r7, #18]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR = tempreg ;
 80007a6:	8afa      	ldrh	r2, [r7, #22]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	61da      	str	r2, [r3, #28]

			// • Configure the rise time register
			I2Cx->TRISE = freq_value + 1 ;
 80007ac:	8abb      	ldrh	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	461a      	mov	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	621a      	str	r2, [r3, #32]
		}

		// • Program the I2C_CR1 register to enable the peripheral
		tempreg = I2Cx->CR1 ;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	82fb      	strh	r3, [r7, #22]
		tempreg |= (uint16_t)(I2C_Cfg->Ack_control | I2C_Cfg->I2C_mode | I2C_Cfg->clock_stretch_mode) ;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	8afb      	ldrh	r3, [r7, #22]
 80007d8:	4313      	orrs	r3, r2
 80007da:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR1 = tempreg ;
 80007dc:	8afa      	ldrh	r2, [r7, #22]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]

		// OAR1 & OAR2 configuration
		tempreg = 0 ;
 80007e2:	2300      	movs	r3, #0
 80007e4:	82fb      	strh	r3, [r7, #22]
		if (I2C_Cfg->slave_device_address.Enable_Dual_Address == 1) {
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	899b      	ldrh	r3, [r3, #12]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10d      	bne.n	800080a <MCAL_I2C_Init+0x142>
			tempreg = I2C_OAR2_ENDUAL ;
 80007ee:	2301      	movs	r3, #1
 80007f0:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_Cfg->slave_device_address.secondary_address << I2C_OAR2_ADD2_Pos ;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	8a1b      	ldrh	r3, [r3, #16]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21b      	sxth	r3, r3
 8000802:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tempreg ;
 8000804:	8afa      	ldrh	r2, [r7, #22]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60da      	str	r2, [r3, #12]
		}
		tempreg = 0 ;
 800080a:	2300      	movs	r3, #0
 800080c:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Cfg->slave_device_address.primary_address << 1 ;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	89db      	ldrh	r3, [r3, #14]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b21a      	sxth	r2, r3
 8000816:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800081a:	4313      	orrs	r3, r2
 800081c:	b21b      	sxth	r3, r3
 800081e:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Cfg->slave_device_address.addressing_slave_mode ;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	b29a      	uxth	r2, r3
 8000826:	8afb      	ldrh	r3, [r7, #22]
 8000828:	4313      	orrs	r3, r2
 800082a:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tempreg ;
 800082c:	8afa      	ldrh	r2, [r7, #22]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	609a      	str	r2, [r3, #8]

		// if operates in slave mode (enable interrupt)
		if (I2C_Cfg->p_slave_callback != NULL) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d032      	beq.n	80008a0 <MCAL_I2C_Init+0x1d8>
			I2Cx->CR2 |= I2C_CR2_ITBUFEN ;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	605a      	str	r2, [r3, #4]
			I2Cx->CR2 |= I2C_CR2_ITEVTEN ;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	605a      	str	r2, [r3, #4]
			I2Cx->CR2 |= I2C_CR2_ITERREN ;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	605a      	str	r2, [r3, #4]
			if (I2Cx == I2C1) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MCAL_I2C_Init+0x1f0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10c      	bne.n	8000880 <MCAL_I2C_Init+0x1b8>
				NVIC_IRQ31_I2C1_EV_ENABLE() ;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MCAL_I2C_Init+0x204>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MCAL_I2C_Init+0x204>)
 800086c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000870:	6013      	str	r3, [r2, #0]
				NVIC_IRQ32_I2C1_ER_ENABLE() ;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MCAL_I2C_Init+0x208>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <MCAL_I2C_Init+0x208>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e00f      	b.n	80008a0 <MCAL_I2C_Init+0x1d8>
			}
			else if (I2Cx == I2C2) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <MCAL_I2C_Init+0x20c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d10b      	bne.n	80008a0 <MCAL_I2C_Init+0x1d8>
				NVIC_IRQ33_I2C2_EV_ENABLE() ;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MCAL_I2C_Init+0x208>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <MCAL_I2C_Init+0x208>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	6013      	str	r3, [r2, #0]
				NVIC_IRQ34_I2C2_ER_ENABLE() ;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MCAL_I2C_Init+0x208>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <MCAL_I2C_Init+0x208>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6013      	str	r3, [r2, #0]
			}
		}

		I2Cx->CR1 |= I2C_CR1_PE ;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f043 0201 	orr.w	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]

	}
}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdb0      	pop	{r4, r5, r7, pc}
 80008b4:	007a1200 	.word	0x007a1200
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	2000001c 	.word	0x2000001c
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	000186a0 	.word	0x000186a0
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000e104 	.word	0xe000e104
 80008d4:	40005800 	.word	0x40005800

080008d8 <MCAL_I2C_GPIO_Pins>:
 * 		@param[out]		-	none
 * 		@return value	-	none
 * 		Note			-	required AF modes can be found in TRM @ section 9.1.11 GPIO configurations for device peripherals
 *							AFIO pins can be found in TRM @ section 9.3 Alternate function I/O
 */
void MCAL_I2C_GPIO_Pins (I2C_TypeDef* I2Cx) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	/*
	 * I2Cx_SCL 	I2C clock 		Alternate function open drain
	 * I2Cx_SDA 	I2C Data 		I/O Alternate function open drain
	 */
	GPIO_PinConfig_t pin_config ;
	if (I2Cx == I2C1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MCAL_I2C_GPIO_Pins+0x88>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d118      	bne.n	800091a <MCAL_I2C_GPIO_Pins+0x42>
		/*
		 * I2C1_SCL		PB6				Alternate function open drain
		 * I2C1_SDA		PB7				Alternate function open drain
		 */
		pin_config.GPIO_MODE = GPIO_MODE_AF_OPEN_DRAIN ;
 80008e8:	2307      	movs	r3, #7
 80008ea:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
		pin_config.GPIO_PinNumber = GPIO_PIN_6 ;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pin_config) ;
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	; (8000964 <MCAL_I2C_GPIO_Pins+0x8c>)
 80008fc:	f7ff fe36 	bl	800056c <MCAL_GPIO_Init>

		pin_config.GPIO_MODE = GPIO_MODE_AF_OPEN_DRAIN ;
 8000900:	2307      	movs	r3, #7
 8000902:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
		pin_config.GPIO_PinNumber = GPIO_PIN_7 ;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pin_config) ;
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MCAL_I2C_GPIO_Pins+0x8c>)
 8000914:	f7ff fe2a 	bl	800056c <MCAL_GPIO_Init>
		pin_config.GPIO_MODE = GPIO_MODE_AF_OPEN_DRAIN ;
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
		pin_config.GPIO_PinNumber = GPIO_PIN_11 ;
		MCAL_GPIO_Init(GPIOB, &pin_config) ;
	}
}
 8000918:	e01d      	b.n	8000956 <MCAL_I2C_GPIO_Pins+0x7e>
	else if (I2Cx == I2C2) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MCAL_I2C_GPIO_Pins+0x90>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d119      	bne.n	8000956 <MCAL_I2C_GPIO_Pins+0x7e>
		pin_config.GPIO_MODE = GPIO_MODE_AF_OPEN_DRAIN ;
 8000922:	2307      	movs	r3, #7
 8000924:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
		pin_config.GPIO_PinNumber = GPIO_PIN_10 ;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pin_config) ;
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <MCAL_I2C_GPIO_Pins+0x8c>)
 8000938:	f7ff fe18 	bl	800056c <MCAL_GPIO_Init>
		pin_config.GPIO_MODE = GPIO_MODE_AF_OPEN_DRAIN ;
 800093c:	2307      	movs	r3, #7
 800093e:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
		pin_config.GPIO_PinNumber = GPIO_PIN_11 ;
 8000944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000948:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pin_config) ;
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MCAL_I2C_GPIO_Pins+0x8c>)
 8000952:	f7ff fe0b 	bl	800056c <MCAL_GPIO_Init>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40005800 	.word	0x40005800

0800096c <MCAL_I2C_Master_Tx>:
 * 						 	start or repeated start
 * 		@param[out]		-	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_I2C_Master_Tx (I2C_TypeDef* I2Cx , uint16_t slave_address , uint8_t* data_buffer , uint32_t datalen , EN_Stop_Condition stop_cond , EN_Start start) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	460b      	mov	r3, r1
 800097a:	817b      	strh	r3, [r7, #10]
	int i = 0 ;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

	// generate start bit
	I2C_Generate_Start (I2Cx, enable, non_repeated_start) ;
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 f8b9 	bl	8000afc <I2C_Generate_Start>

	// wait for EV5 : SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while (!(I2C_Get_Flag_Status(I2Cx, EV5))) ;
 800098a:	bf00      	nop
 800098c:	2101      	movs	r1, #1
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f8dc 	bl	8000b4c <I2C_Get_Flag_Status>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f8      	beq.n	800098c <MCAL_I2C_Master_Tx+0x20>

	// write slave address on data register
	I2C_Send_Address(I2Cx, slave_address, Transmit) ;
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f94f 	bl	8000c44 <I2C_Send_Address>

	// wait for EV6 : ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while (!(I2C_Get_Flag_Status(I2Cx, EV6))) ;
 80009a6:	bf00      	nop
 80009a8:	2102      	movs	r1, #2
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f8ce 	bl	8000b4c <I2C_Get_Flag_Status>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f8      	beq.n	80009a8 <MCAL_I2C_Master_Tx+0x3c>

	// check for Busy, MSL , TXE , TRA
	while (!(I2C_Get_Flag_Status(I2Cx, Master_Transmitter_Event))) ;
 80009b6:	bf00      	nop
 80009b8:	4915      	ldr	r1, [pc, #84]	; (8000a10 <MCAL_I2C_Master_Tx+0xa4>)
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f000 f8c6 	bl	8000b4c <I2C_Get_Flag_Status>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <MCAL_I2C_Master_Tx+0x4c>

	for (i=0 ; i<datalen ; i++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e011      	b.n	80009f0 <MCAL_I2C_Master_Tx+0x84>
		I2Cx->DR = data_buffer[i] ;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	611a      	str	r2, [r3, #16]
		// wait for EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while (!(I2C_Get_Flag_Status(I2Cx, EV8))) ;
 80009da:	bf00      	nop
 80009dc:	2104      	movs	r1, #4
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f8b4 	bl	8000b4c <I2C_Get_Flag_Status>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f8      	beq.n	80009dc <MCAL_I2C_Master_Tx+0x70>
	for (i=0 ; i<datalen ; i++) {
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8e9      	bhi.n	80009cc <MCAL_I2C_Master_Tx+0x60>
	}

	// check stop condition
	if (stop_cond == with_stop) {
 80009f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d103      	bne.n	8000a08 <MCAL_I2C_Master_Tx+0x9c>
		I2C_Generate_Stop (I2Cx , enable) ;
 8000a00:	2101      	movs	r1, #1
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f000 f93d 	bl	8000c82 <I2C_Generate_Stop>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	00070080 	.word	0x00070080

08000a14 <MCAL_I2C_Master_Rx>:
 * 						 	start or repeated start
 * 		@param[out]		-	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_I2C_Master_Rx (I2C_TypeDef* I2Cx , uint16_t slave_address , uint8_t* data_buffer , uint32_t datalen , EN_Stop_Condition stop_cond , EN_Start start) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	460b      	mov	r3, r1
 8000a22:	817b      	strh	r3, [r7, #10]
	int i = 0 ;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

	uint8_t index = I2Cx == I2C1 ? I2C1_index : I2C2_index;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <MCAL_I2C_Master_Rx+0xe0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	74fb      	strb	r3, [r7, #19]

	// generate start bit
	I2C_Generate_Start (I2Cx, enable, non_repeated_start) ;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 f85d 	bl	8000afc <I2C_Generate_Start>

	// wait for EV5 : SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while (!(I2C_Get_Flag_Status(I2Cx, EV5))) ;
 8000a42:	bf00      	nop
 8000a44:	2101      	movs	r1, #1
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f880 	bl	8000b4c <I2C_Get_Flag_Status>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f8      	beq.n	8000a44 <MCAL_I2C_Master_Rx+0x30>

	// write slave address on data register
	I2C_Send_Address(I2Cx, slave_address, Receive) ;
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4619      	mov	r1, r3
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f8f3 	bl	8000c44 <I2C_Send_Address>

	// wait for EV6 : ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while (!(I2C_Get_Flag_Status(I2Cx, EV6))) ;
 8000a5e:	bf00      	nop
 8000a60:	2102      	movs	r1, #2
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f000 f872 	bl	8000b4c <I2C_Get_Flag_Status>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f8      	beq.n	8000a60 <MCAL_I2C_Master_Rx+0x4c>

	I2C_ACKConfig(I2Cx , enable) ;
 8000a6e:	2101      	movs	r1, #1
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f921 	bl	8000cb8 <I2C_ACKConfig>

	if (datalen) {
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d01c      	beq.n	8000ab6 <MCAL_I2C_Master_Rx+0xa2>
		for (i=datalen ; i>1 ; i--) {
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e012      	b.n	8000aa8 <MCAL_I2C_Master_Rx+0x94>
			// wait for EV7 : RXNE = 1 cleared by reading DR register
			while (!(I2C_Get_Flag_Status(I2Cx, EV7))) ;
 8000a82:	bf00      	nop
 8000a84:	2103      	movs	r1, #3
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f860 	bl	8000b4c <I2C_Get_Flag_Status>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <MCAL_I2C_Master_Rx+0x70>

			// read data from DR register
			*data_buffer = I2Cx->DR ;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
			data_buffer++ ;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
		for (i=datalen ; i>1 ; i--) {
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	dce9      	bgt.n	8000a82 <MCAL_I2C_Master_Rx+0x6e>
		}
		// Send NACK
		I2C_ACKConfig(I2Cx , disable) ;
 8000aae:	2100      	movs	r1, #0
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f901 	bl	8000cb8 <I2C_ACKConfig>
	}

	// check stop condition
	if (stop_cond == with_stop) {
 8000ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d103      	bne.n	8000ac6 <MCAL_I2C_Master_Rx+0xb2>
		I2C_Generate_Stop (I2Cx , enable) ;
 8000abe:	2101      	movs	r1, #1
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f000 f8de 	bl	8000c82 <I2C_Generate_Stop>
	}
	// Re-enable automatic ACK
	if(g_I2C_Cfg[index].Ack_control == I2C_Ack_ENABLE)
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MCAL_I2C_Master_Rx+0xe4>)
 8000aca:	015b      	lsls	r3, r3, #5
 8000acc:	4413      	add	r3, r2
 8000ace:	3318      	adds	r3, #24
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad6:	d104      	bne.n	8000ae2 <MCAL_I2C_Master_Rx+0xce>
		I2C_ACKConfig(I2Cx, enable);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f8ec 	bl	8000cb8 <I2C_ACKConfig>
	else
		I2C_ACKConfig(I2Cx, disable);
}
 8000ae0:	e003      	b.n	8000aea <MCAL_I2C_Master_Rx+0xd6>
		I2C_ACKConfig(I2Cx, disable);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f000 f8e7 	bl	8000cb8 <I2C_ACKConfig>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40005400 	.word	0x40005400
 8000af8:	2000001c 	.word	0x2000001c

08000afc <I2C_Generate_Start>:

//===================================================================================================

// --------------------------------- Specific APIs ------------------------------------------------------------

void I2C_Generate_Start  (I2C_TypeDef* I2Cx , EN_Functional_state NewState , EN_Start start) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	70bb      	strb	r3, [r7, #2]
	if (start == non_repeated_start){
 8000b0c:	78bb      	ldrb	r3, [r7, #2]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d107      	bne.n	8000b22 <I2C_Generate_Start+0x26>
		/*
		 * Bit 1 BUSY: Bus busy in SR2
			0: No communication on the bus
			1: Communication ongoing on the bus
		 */
		while (I2C_Get_Flag_Status(I2Cx, I2C_Flag_Busy)) ;   // wait for bus to be idle
 8000b12:	bf00      	nop
 8000b14:	2100      	movs	r1, #0
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f818 	bl	8000b4c <I2C_Get_Flag_Status>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f8      	bne.n	8000b14 <I2C_Generate_Start+0x18>
				1: Repeated start generation
			In Slave mode:
				0: No Start generation
				1: Start generation when the bus is free
	 */
	if (NewState != disable) {
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <I2C_Generate_Start+0x3a>
		I2Cx->CR1 |= I2C_CR1_START ;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]
	}
	else {
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000b34:	e005      	b.n	8000b42 <I2C_Generate_Start+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <I2C_Get_Flag_Status>:

EN_Flag_Status I2C_Get_Flag_Status (I2C_TypeDef* I2Cx , EN_Status flag) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	EN_Flag_Status bitstatus = Reset ;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0 , flag2 = 0 ;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t last_event = 0 ;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
	switch (flag) {
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d026      	beq.n	8000bba <I2C_Get_Flag_Status+0x6e>
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d804      	bhi.n	8000b7a <I2C_Get_Flag_Status+0x2e>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <I2C_Get_Flag_Status+0x3e>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d014      	beq.n	8000ba2 <I2C_Get_Flag_Status+0x56>
 8000b78:	e05c      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d029      	beq.n	8000bd2 <I2C_Get_Flag_Status+0x86>
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d333      	bcc.n	8000bea <I2C_Get_Flag_Status+0x9e>
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <I2C_Get_Flag_Status+0xf4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d03c      	beq.n	8000c02 <I2C_Get_Flag_Status+0xb6>
 8000b88:	e054      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
	case I2C_Flag_Busy :
		if (I2Cx->SR2 & I2C_SR2_BUSY)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <I2C_Get_Flag_Status+0x50>
			bitstatus = Set ;
 8000b96:	2301      	movs	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset ;
		break ;
 8000b9a:	e04b      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
			bitstatus = Reset ;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	75fb      	strb	r3, [r7, #23]
		break ;
 8000ba0:	e048      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>

	case EV5 :
		if (I2Cx->SR1 & I2C_SR1_SB)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <I2C_Get_Flag_Status+0x68>
			bitstatus = Set ;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset ;
		break ;
 8000bb2:	e03f      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
			bitstatus = Reset ;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	75fb      	strb	r3, [r7, #23]
		break ;
 8000bb8:	e03c      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>

	case EV6 :
		if (I2Cx->SR1 & I2C_SR1_ADDR)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <I2C_Get_Flag_Status+0x80>
			bitstatus = Set ;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset ;
		break ;
 8000bca:	e033      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
			bitstatus = Reset ;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	75fb      	strb	r3, [r7, #23]
		break ;
 8000bd0:	e030      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>

	case EV8 :
		if (I2Cx->SR1 & I2C_SR1_TXE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <I2C_Get_Flag_Status+0x98>
			bitstatus = Set ;
 8000bde:	2301      	movs	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset ;
		break ;
 8000be2:	e027      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
			bitstatus = Reset ;
 8000be4:	2300      	movs	r3, #0
 8000be6:	75fb      	strb	r3, [r7, #23]
		break ;
 8000be8:	e024      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>

	case EV7 :
		if (I2Cx->SR1 & I2C_SR1_RXNE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <I2C_Get_Flag_Status+0xb0>
			bitstatus = Set ;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset ;
		break ;
 8000bfa:	e01b      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>
			bitstatus = Reset ;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
		break ;
 8000c00:	e018      	b.n	8000c34 <I2C_Get_Flag_Status+0xe8>

	case Master_Transmitter_Event :
	{
		flag1 = Master_Transmitter_Event & (0x0000ffff);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	613b      	str	r3, [r7, #16]
		flag2 =  Master_Transmitter_Event >> 16;
 8000c06:	2307      	movs	r3, #7
 8000c08:	60fb      	str	r3, [r7, #12]
		last_event = ((I2Cx->SR1 & flag1) | ((I2Cx->SR2 & flag2) << 16) );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	401a      	ands	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6999      	ldr	r1, [r3, #24]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	041b      	lsls	r3, r3, #16
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
		if(last_event == flag)
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d102      	bne.n	8000c2e <I2C_Get_Flag_Status+0xe2>
			bitstatus = Set;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = Reset;
	}
	break;
 8000c2c:	e001      	b.n	8000c32 <I2C_Get_Flag_Status+0xe6>
			bitstatus = Reset;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]
	break;
 8000c32:	bf00      	nop
	}
	return bitstatus ;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	00070080 	.word	0x00070080

08000c44 <I2C_Send_Address>:

void I2C_Send_Address (I2C_TypeDef* I2Cx , uint16_t Address , EN_Operation operation) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	707b      	strb	r3, [r7, #1]
	/*
	 * In 7-bit addressing mode,
		– To enter Transmitter mode, a master sends the slave address with LSB reset.
		– To enter Receiver mode, a master sends the slave address with LSB set.
	 */
	Address = (Address << 1) ;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	807b      	strh	r3, [r7, #2]
	if (operation == Transmit) {
 8000c5a:	787b      	ldrb	r3, [r7, #1]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <I2C_Send_Address+0x26>
		Address &= ~(1 << 0) ;
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	e003      	b.n	8000c72 <I2C_Send_Address+0x2e>
	}
	else {
		Address |= (1 << 0) ;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->DR = Address ;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <I2C_Generate_Stop>:

void I2C_Generate_Stop (I2C_TypeDef* I2Cx , EN_Functional_state NewState) {
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
	if (NewState != disable) {
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <I2C_Generate_Stop+0x20>
		I2Cx->CR1 |= I2C_CR1_STOP ;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
	}
	else {
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;
	}
}
 8000ca0:	e005      	b.n	8000cae <I2C_Generate_Stop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_TypeDef *I2Cx, EN_Functional_state NewState) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	if(NewState == enable) {
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d106      	bne.n	8000cd8 <I2C_ACKConfig+0x20>
		I2Cx->CR1 |= (I2C_CR1_ACK);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
	}
	else {
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8000cd6:	e005      	b.n	8000ce4 <I2C_ACKConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
	...

08000cf0 <MCAL_RCC_Get_SysClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value	-	SysClk frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_SysClk_Freq (void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	switch ((RCC->CFGR >> 2) & 0b11) {
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MCAL_RCC_Get_SysClk_Freq+0x30>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d006      	beq.n	8000d10 <MCAL_RCC_Get_SysClk_Freq+0x20>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d302      	bcc.n	8000d0c <MCAL_RCC_Get_SysClk_Freq+0x1c>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d004      	beq.n	8000d14 <MCAL_RCC_Get_SysClk_Freq+0x24>
 8000d0a:	e005      	b.n	8000d18 <MCAL_RCC_Get_SysClk_Freq+0x28>
	case 0 :
		return HSI_CLK ;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MCAL_RCC_Get_SysClk_Freq+0x34>)
 8000d0e:	e003      	b.n	8000d18 <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	case 1 :
		return HSE_CLK ;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <MCAL_RCC_Get_SysClk_Freq+0x38>)
 8000d12:	e001      	b.n	8000d18 <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	case 2 :
		return PLL_CLK ;
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <MCAL_RCC_Get_SysClk_Freq+0x38>)
 8000d16:	e7ff      	b.n	8000d18 <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	}
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	007a1200 	.word	0x007a1200
 8000d28:	00f42400 	.word	0x00f42400

08000d2c <MCAL_RCC_Get_HClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value	-	AHB clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_HClk_Freq (void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Hclk ;
	cfg_value = (RCC->CFGR >> 4) & 0b1111 ;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MCAL_RCC_Get_HClk_Freq+0xb4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	60bb      	str	r3, [r7, #8]
		1101: SYSCLK divided by 128
		1110: SYSCLK divided by 256
		1111: SYSCLK divided by 512
	 *
	 */
	switch (cfg_value) {
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d840      	bhi.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
 8000d44:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <MCAL_RCC_Get_HClk_Freq+0x20>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d8d 	.word	0x08000d8d
 8000d50:	08000d8d 	.word	0x08000d8d
 8000d54:	08000d8d 	.word	0x08000d8d
 8000d58:	08000d8d 	.word	0x08000d8d
 8000d5c:	08000d8d 	.word	0x08000d8d
 8000d60:	08000d8d 	.word	0x08000d8d
 8000d64:	08000d8d 	.word	0x08000d8d
 8000d68:	08000d8d 	.word	0x08000d8d
 8000d6c:	08000d93 	.word	0x08000d93
 8000d70:	08000d99 	.word	0x08000d99
 8000d74:	08000d9f 	.word	0x08000d9f
 8000d78:	08000da5 	.word	0x08000da5
 8000d7c:	08000dab 	.word	0x08000dab
 8000d80:	08000db1 	.word	0x08000db1
 8000d84:	08000db7 	.word	0x08000db7
 8000d88:	08000dbf 	.word	0x08000dbf
	case 0b0011 :
	case 0b0100 :
	case 0b0101 :
	case 0b0110 :
	case 0b0111 :
		prescaler = 1 ;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
		break ;
 8000d90:	e019      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1000 :
		prescaler = 2 ;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60fb      	str	r3, [r7, #12]
		break ;
 8000d96:	e016      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1001 :
		prescaler = 4 ;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
		break ;
 8000d9c:	e013      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1010 :
		prescaler = 8 ;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	60fb      	str	r3, [r7, #12]
		break ;
 8000da2:	e010      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1011 :
		prescaler = 16 ;
 8000da4:	2310      	movs	r3, #16
 8000da6:	60fb      	str	r3, [r7, #12]
		break ;
 8000da8:	e00d      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1100 :
		prescaler = 64 ;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	60fb      	str	r3, [r7, #12]
		break ;
 8000dae:	e00a      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1101 :
		prescaler = 128 ;
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	60fb      	str	r3, [r7, #12]
		break ;
 8000db4:	e007      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1110 :
		prescaler = 256 ;
 8000db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dba:	60fb      	str	r3, [r7, #12]
		break ;
 8000dbc:	e003      	b.n	8000dc6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1111 :
		prescaler = 512 ;
 8000dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc2:	60fb      	str	r3, [r7, #12]
		break ;
 8000dc4:	bf00      	nop
	}
	Hclk = (uint32_t)(MCAL_RCC_Get_SysClk_Freq() / prescaler) ;
 8000dc6:	f7ff ff93 	bl	8000cf0 <MCAL_RCC_Get_SysClk_Freq>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	607b      	str	r3, [r7, #4]
	return Hclk ;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <MCAL_RCC_Get_PClk1_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value	-	APB1 clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_PClk1_Freq (void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Pclk1 ;
	cfg_value = (RCC->CFGR >> 8) & 0b111 ;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MCAL_RCC_Get_PClk1_Freq+0x78>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	60bb      	str	r3, [r7, #8]
		100: HCLK divided by 2
		101: HCLK divided by 4
		110: HCLK divided by 8
		111: HCLK divided by 16
	 */
	switch (cfg_value) {
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b07      	cmp	r3, #7
 8000dfa:	d822      	bhi.n	8000e42 <MCAL_RCC_Get_PClk1_Freq+0x5e>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <MCAL_RCC_Get_PClk1_Freq+0x20>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e25 	.word	0x08000e25
 8000e08:	08000e25 	.word	0x08000e25
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e25 	.word	0x08000e25
 8000e14:	08000e2b 	.word	0x08000e2b
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e37 	.word	0x08000e37
 8000e20:	08000e3d 	.word	0x08000e3d
	case 0b000 :
	case 0b001 :
	case 0b010 :
	case 0b011 :
		prescaler = 1 ;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
		break ;
 8000e28:	e00b      	b.n	8000e42 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b100 :
		prescaler = 2 ;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	60fb      	str	r3, [r7, #12]
		break ;
 8000e2e:	e008      	b.n	8000e42 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b101 :
		prescaler = 4 ;
 8000e30:	2304      	movs	r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
		break ;
 8000e34:	e005      	b.n	8000e42 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b110 :
		prescaler = 8 ;
 8000e36:	2308      	movs	r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
		break ;
 8000e3a:	e002      	b.n	8000e42 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b111 :
		prescaler = 16 ;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	60fb      	str	r3, [r7, #12]
		break ;
 8000e40:	bf00      	nop
	}
	Pclk1 = (uint32_t)(MCAL_RCC_Get_HClk_Freq() / prescaler) ;
 8000e42:	f7ff ff73 	bl	8000d2c <MCAL_RCC_Get_HClk_Freq>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	607b      	str	r3, [r7, #4]
	return Pclk1 ;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <SPI1_IRQHandler>:
	}
	*data_buffer = SPIx->DR ;
}

//-------------------------------------------ISRs---------------------------------------------------
void SPI1_IRQHandler (void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << TXE_BIT)) >> TXE_BIT ) ;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <SPI1_IRQHandler+0x54>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	793b      	ldrb	r3, [r7, #4]
 8000e74:	f362 0300 	bfi	r3, r2, #0, #1
 8000e78:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << RXNE_BIT)) >> RXNE_BIT ) ;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <SPI1_IRQHandler+0x54>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	793b      	ldrb	r3, [r7, #4]
 8000e86:	f362 0341 	bfi	r3, r2, #1, #1
 8000e8a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << ERROR_BIT)) >> ERROR_BIT ) ;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <SPI1_IRQHandler+0x54>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	793b      	ldrb	r3, [r7, #4]
 8000e9a:	f362 0382 	bfi	r3, r2, #2, #1
 8000e9e:	713b      	strb	r3, [r7, #4]
	g_SPI_Cfg[SPI1_index]->p_IRQ_CallBack(irq_src) ;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SPI1_IRQHandler+0x58>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	7938      	ldrb	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	2000005c 	.word	0x2000005c

08000ebc <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << TXE_BIT)) >> TXE_BIT ) ;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <SPI2_IRQHandler+0x54>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	793b      	ldrb	r3, [r7, #4]
 8000ed0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ed4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << RXNE_BIT)) >> RXNE_BIT ) ;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <SPI2_IRQHandler+0x54>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	793b      	ldrb	r3, [r7, #4]
 8000ee2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ee6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << ERROR_BIT)) >> ERROR_BIT ) ;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <SPI2_IRQHandler+0x54>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	f362 0382 	bfi	r3, r2, #2, #1
 8000efa:	713b      	strb	r3, [r7, #4]
	g_SPI_Cfg[SPI2_index]->p_IRQ_CallBack(irq_src) ;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SPI2_IRQHandler+0x58>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	7938      	ldrb	r0, [r7, #4]
 8000f04:	4798      	blx	r3

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40003800 	.word	0x40003800
 8000f14:	2000005c 	.word	0x2000005c

08000f18 <USART1_IRQHandler>:
		}
	}
}

//-------------------------------------------ISRs---------------------------------------------------
void USART1_IRQHandler (void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	g_USART_Cfg[0]->p_IRQ_CallBack() ;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <USART1_IRQHandler+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4798      	blx	r3
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000064 	.word	0x20000064

08000f2c <USART2_IRQHandler>:
void USART2_IRQHandler (void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	g_USART_Cfg[1]->p_IRQ_CallBack() ;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <USART2_IRQHandler+0x10>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4798      	blx	r3
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000064 	.word	0x20000064

08000f40 <USART3_IRQHandler>:
void USART3_IRQHandler (void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	g_USART_Cfg[2]->p_IRQ_CallBack() ;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <USART3_IRQHandler+0x10>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4798      	blx	r3
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000064 	.word	0x20000064

08000f54 <clock_init>:
#include "STM32F103C6.h"
#include "RCC.h"
#include "I2C_Slave_EEPROM.h"


void clock_init (void) {
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	CLK_EN_GPIOA() ;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <clock_init+0x30>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <clock_init+0x30>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
	CLK_EN_GPIOB() ;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <clock_init+0x30>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <clock_init+0x30>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6193      	str	r3, [r2, #24]
	CLK_EN_AFIO() ;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <clock_init+0x30>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <clock_init+0x30>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	40021000 	.word	0x40021000

08000f88 <main>:
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
	clock_init() ;
 8000f8e:	f7ff ffe1 	bl	8000f54 <clock_init>
	HAL_EEPROM_Init();
 8000f92:	f7ff f8ed 	bl	8000170 <HAL_EEPROM_Init>

	//Test Case 1
	uint8_t ch1[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 8000f96:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <main+0x78>)
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa0:	6018      	str	r0, [r3, #0]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	8019      	strh	r1, [r3, #0]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	0c0a      	lsrs	r2, r1, #16
 8000faa:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f8c3 2003 	str.w	r2, [r3, #3]
	HAL_EEPROM_Write(0xAF, ch1, 7);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2207      	movs	r2, #7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	20af      	movs	r0, #175	; 0xaf
 8000fc0:	f7ff f8f4 	bl	80001ac <HAL_EEPROM_Write>
	HAL_EEPROM_Read(0xAF, ch2, 7);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	20af      	movs	r0, #175	; 0xaf
 8000fcc:	f7ff f940 	bl	8000250 <HAL_EEPROM_Read>

	//Test Case 2
	ch1[0] = 0xA;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000fd8:	230c      	movs	r3, #12
 8000fda:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000fdc:	230d      	movs	r3, #13
 8000fde:	72fb      	strb	r3, [r7, #11]
	HAL_EEPROM_Write(0xFFF, ch1, 4);
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fec:	f7ff f8de 	bl	80001ac <HAL_EEPROM_Write>
	HAL_EEPROM_Read(0xFFF, ch2, 4);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ffa:	f7ff f929 	bl	8000250 <HAL_EEPROM_Read>

	while (1) {
 8000ffe:	e7fe      	b.n	8000ffe <main+0x76>
 8001000:	080010b8 	.word	0x080010b8

08001004 <Reset_Handler>:
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopForever+0x2>)
 8001006:	4685      	mov	sp, r0
 8001008:	f3af 8000 	nop.w
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopForever+0x6>)
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopForever+0xa>)
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopForever+0xe>)
 8001012:	2300      	movs	r3, #0
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:
 8001016:	58d4      	ldr	r4, [r2, r3]
 8001018:	50c4      	str	r4, [r0, r3]
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:
 800101c:	18c4      	adds	r4, r0, r3
 800101e:	428c      	cmp	r4, r1
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopForever+0x12>)
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopForever+0x16>)
 8001026:	2300      	movs	r3, #0
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:
 800102e:	42a2      	cmp	r2, r4
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>
 8001032:	f000 f811 	bl	8001058 <__libc_init_array>
 8001036:	f7ff ffa7 	bl	8000f88 <main>

0800103a <LoopForever>:
 800103a:	e7fe      	b.n	800103a <LoopForever>
 800103c:	20002800 	.word	0x20002800
 8001040:	20000000 	.word	0x20000000
 8001044:	20000000 	.word	0x20000000
 8001048:	080010c8 	.word	0x080010c8
 800104c:	20000000 	.word	0x20000000
 8001050:	200000ac 	.word	0x200000ac

08001054 <ADC1_2_IRQHandler>:
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>
	...

08001058 <__libc_init_array>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	2500      	movs	r5, #0
 800105c:	4e0c      	ldr	r6, [pc, #48]	; (8001090 <__libc_init_array+0x38>)
 800105e:	4c0d      	ldr	r4, [pc, #52]	; (8001094 <__libc_init_array+0x3c>)
 8001060:	1ba4      	subs	r4, r4, r6
 8001062:	10a4      	asrs	r4, r4, #2
 8001064:	42a5      	cmp	r5, r4
 8001066:	d109      	bne.n	800107c <__libc_init_array+0x24>
 8001068:	f000 f81a 	bl	80010a0 <_init>
 800106c:	2500      	movs	r5, #0
 800106e:	4e0a      	ldr	r6, [pc, #40]	; (8001098 <__libc_init_array+0x40>)
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <__libc_init_array+0x44>)
 8001072:	1ba4      	subs	r4, r4, r6
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	42a5      	cmp	r5, r4
 8001078:	d105      	bne.n	8001086 <__libc_init_array+0x2e>
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001080:	4798      	blx	r3
 8001082:	3501      	adds	r5, #1
 8001084:	e7ee      	b.n	8001064 <__libc_init_array+0xc>
 8001086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800108a:	4798      	blx	r3
 800108c:	3501      	adds	r5, #1
 800108e:	e7f2      	b.n	8001076 <__libc_init_array+0x1e>
 8001090:	080010c0 	.word	0x080010c0
 8001094:	080010c0 	.word	0x080010c0
 8001098:	080010c0 	.word	0x080010c0
 800109c:	080010c4 	.word	0x080010c4

080010a0 <_init>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr

080010ac <_fini>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr
