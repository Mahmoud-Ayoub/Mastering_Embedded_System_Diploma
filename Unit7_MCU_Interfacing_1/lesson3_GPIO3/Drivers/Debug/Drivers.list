
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005f4  000105f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  000105f4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  000105f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005f4  000105f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001902  00000000  00000000  0001061d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003a1  00000000  00000000  00011f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003fc  00000000  00000000  000122c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  000126c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012778  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b08  00000000  00000000  00012808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c68  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007683  00000000  00000000  00014f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c5fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000218  00000000  00000000  0001c678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005d4 	.word	0x080005d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005d4 	.word	0x080005d4

08000170 <GPIO_CRLH_GetPosition>:
 *
 *      Author: Mahmoud Ayoub
 */
#include "GPIO.h"

static GPIO_CRLH_GetPosition (uint16_t PinNumber) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <GPIO_CRLH_GetPosition+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <GPIO_CRLH_GetPosition+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <GPIO_CRLH_GetPosition+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <GPIO_CRLH_GetPosition+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <GPIO_CRLH_GetPosition+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <GPIO_CRLH_GetPosition+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <GPIO_CRLH_GetPosition+0x7a>
 8000198:	e047      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <GPIO_CRLH_GetPosition+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <GPIO_CRLH_GetPosition+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <GPIO_CRLH_GetPosition+0x8a>
 80001a6:	e040      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <GPIO_CRLH_GetPosition+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <GPIO_CRLH_GetPosition+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <GPIO_CRLH_GetPosition+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <GPIO_CRLH_GetPosition+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <GPIO_CRLH_GetPosition+0x9a>
 80001c6:	e030      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <GPIO_CRLH_GetPosition+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <GPIO_CRLH_GetPosition+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <GPIO_CRLH_GetPosition+0xaa>
 80001da:	e026      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <GPIO_CRLH_GetPosition+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <GPIO_CRLH_GetPosition+0xb6>
 80001e8:	e01f      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
	case GPIO_PIN_0 :
		return 0 ;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01d      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01b      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e019      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e017      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e015      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 80001fe:	2314      	movs	r3, #20
 8000200:	e013      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000202:	2318      	movs	r3, #24
 8000204:	e011      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000206:	231c      	movs	r3, #28
 8000208:	e00f      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 800020a:	2300      	movs	r3, #0
 800020c:	e00d      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 800020e:	2304      	movs	r3, #4
 8000210:	e00b      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000212:	2308      	movs	r3, #8
 8000214:	e009      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000216:	230c      	movs	r3, #12
 8000218:	e007      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 800021a:	2310      	movs	r3, #16
 800021c:	e005      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 800021e:	2314      	movs	r3, #20
 8000220:	e003      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000222:	2318      	movs	r3, #24
 8000224:	e001      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000226:	231c      	movs	r3, #28
 8000228:	e7ff      	b.n	800022a <GPIO_CRLH_GetPosition+0xba>
		break ;
	}
}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <MCAL_GPIO_Init>:
 * 		@return value	-	none
 * 		Note			-	STM32F103C6 has GPIO A,B,C,D,E,F,G Modules
 * 							But LQFP48 Package has only GPIO A , B , part of C , part of D
 *
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]

	uint8_t Pin_Config_Value = 0 ;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]

	// Port Configuration register Low (GPIOx_CRL) configure PINS from 0 to 7
	// Port Configuration register High (GPIOx_CRH) configure PINS from 8 to 15
	volatile uint32_t* ConfigReg = NULL ;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2bff      	cmp	r3, #255	; 0xff
 800024c:	d801      	bhi.n	8000252 <MCAL_GPIO_Init+0x1e>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	e001      	b.n	8000256 <MCAL_GPIO_Init+0x22>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3304      	adds	r3, #4
 8000256:	60bb      	str	r3, [r7, #8]

	// clear CNF and MODE
	(*ConfigReg) &= ~ (0xF << GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff87 	bl	8000170 <GPIO_CRLH_GetPosition>
 8000262:	4602      	mov	r2, r0
 8000264:	230f      	movs	r3, #15
 8000266:	4093      	lsls	r3, r2
 8000268:	43da      	mvns	r2, r3
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	401a      	ands	r2, r3
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN) || (PinConfig->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPEN_DRAIN) ) {
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	789b      	ldrb	r3, [r3, #2]
 8000278:	2b07      	cmp	r3, #7
 800027a:	d00b      	beq.n	8000294 <MCAL_GPIO_Init+0x60>
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	2b06      	cmp	r3, #6
 8000282:	d007      	beq.n	8000294 <MCAL_GPIO_Init+0x60>
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	789b      	ldrb	r3, [r3, #2]
 8000288:	2b04      	cmp	r3, #4
 800028a:	d003      	beq.n	8000294 <MCAL_GPIO_Init+0x60>
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	789b      	ldrb	r3, [r3, #2]
 8000290:	2b05      	cmp	r3, #5
 8000292:	d11c      	bne.n	80002ce <MCAL_GPIO_Init+0x9a>
		// Set CNF and MODE
		Pin_Config_Value = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	789b      	ldrb	r3, [r3, #2]
 8000298:	3b04      	subs	r3, #4
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	b25a      	sxtb	r2, r3
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	78db      	ldrb	r3, [r3, #3]
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	73fb      	strb	r3, [r7, #15]
		(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80002b0:	7bfc      	ldrb	r4, [r7, #15]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff5a 	bl	8000170 <GPIO_CRLH_GetPosition>
 80002bc:	4603      	mov	r3, r0
 80002be:	fa04 f203 	lsl.w	r2, r4, r3
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	431a      	orrs	r2, r3
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	e05c      	b.n	8000388 <MCAL_GPIO_Init+0x154>
	}
	// if pin is input
	else {
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)) {
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	789b      	ldrb	r3, [r3, #2]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d003      	beq.n	80002de <MCAL_GPIO_Init+0xaa>
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d115      	bne.n	800030a <MCAL_GPIO_Init+0xd6>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80002ec:	7bfc      	ldrb	r4, [r7, #15]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff3c 	bl	8000170 <GPIO_CRLH_GetPosition>
 80002f8:	4603      	mov	r3, r0
 80002fa:	fa04 f203 	lsl.w	r2, r4, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	431a      	orrs	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	e03e      	b.n	8000388 <MCAL_GPIO_Init+0x154>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) {
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	2b08      	cmp	r3, #8
 8000310:	d115      	bne.n	800033e <MCAL_GPIO_Init+0x10a>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	789b      	ldrb	r3, [r3, #2]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	b2db      	uxtb	r3, r3
 800031a:	f003 030f 	and.w	r3, r3, #15
 800031e:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000320:	7bfc      	ldrb	r4, [r7, #15]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff22 	bl	8000170 <GPIO_CRLH_GetPosition>
 800032c:	4603      	mov	r3, r0
 800032e:	fa04 f203 	lsl.w	r2, r4, r3
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	431a      	orrs	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	601a      	str	r2, [r3, #0]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;

		}
	}

}
 800033c:	e024      	b.n	8000388 <MCAL_GPIO_Init+0x154>
			Pin_Config_Value = ( (((GPIO_MODE_INPUT_PULL_UP) << 2) | (0x0)) & 0x0F ) ;
 800033e:	2308      	movs	r3, #8
 8000340:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULL_UP) {
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d107      	bne.n	800035a <MCAL_GPIO_Init+0x126>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	8812      	ldrh	r2, [r2, #0]
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	e007      	b.n	800036a <MCAL_GPIO_Init+0x136>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	8812      	ldrh	r2, [r2, #0]
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	60da      	str	r2, [r3, #12]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 800036a:	7bfc      	ldrb	r4, [r7, #15]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff fefd 	bl	8000170 <GPIO_CRLH_GetPosition>
 8000376:	4603      	mov	r3, r0
 8000378:	fa04 f203 	lsl.w	r2, r4, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	431a      	orrs	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	e7ff      	b.n	8000388 <MCAL_GPIO_Init+0x154>
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	bd90      	pop	{r4, r7, pc}

08000390 <MCAL_GPIO_ReadPin>:
 * 		@param[in]		-	PinNumber : where PinNumber can be (GPIO_PIN_0 .. 15) according to @ref GPIO_PINS_define
 * 		@param[out]		- 	none
 * 		@return value	-	value of input pin according to @ref GPIO_PIN_state
 * 		Note			-	none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef* GPIOx , uint16_t PinNumber) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
	if ( (GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	887b      	ldrh	r3, [r7, #2]
 80003a2:	4013      	ands	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MCAL_GPIO_ReadPin+0x1c>
		return GPIO_PIN_SET ;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <MCAL_GPIO_ReadPin+0x1e>
	}
	else {
		return GPIO_PIN_RESET ;
 80003ac:	2300      	movs	r3, #0
	}
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <MCAL_GPIO_WritePin>:
 * 		@param[in]		-	Value required to be written on the specified pin
 * 		@param[out]		- 	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value) {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	807b      	strh	r3, [r7, #2]
 80003c4:	4613      	mov	r3, r2
 80003c6:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET) {
 80003c8:	787b      	ldrb	r3, [r7, #1]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d006      	beq.n	80003dc <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= ((uint32_t)PinNumber) ;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	887b      	ldrh	r3, [r7, #2]
 80003d4:	431a      	orrs	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60da      	str	r2, [r3, #12]
	}
	else {
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
	}
}
 80003da:	e006      	b.n	80003ea <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	887b      	ldrh	r3, [r7, #2]
 80003e2:	43db      	mvns	r3, r3
 80003e4:	401a      	ands	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60da      	str	r2, [r3, #12]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <MCAL_GPIO_TogglePin>:
 * 		@param[in]		-	PinNumber : where PinNumber can be (GPIO_PIN_0 .. 15) according to @ref GPIO_PINS_define
 * 		@param[out]		- 	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_GPIO_TogglePin (GPIO_TypeDef* GPIOx , uint16_t PinNumber) {
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber) ;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	405a      	eors	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
	...

08000418 <clock_init>:
 ******************************************************************************
 */
#include "STM32F103C6.h"
#include "GPIO.h"

void clock_init (void) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	CLK_EN_GPIOA() ;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <clock_init+0x24>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <clock_init+0x24>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
	CLK_EN_GPIOB() ;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <clock_init+0x24>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <clock_init+0x24>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6193      	str	r3, [r2, #24]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <Pins_init>:
void Pins_init (void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
	// configure PA1 as input floating
	GPIO_PinConfig_t PA1_config ;
	PA1_config.GPIO_PinNumber = GPIO_PIN_1 ;
 8000446:	2302      	movs	r3, #2
 8000448:	81bb      	strh	r3, [r7, #12]
	PA1_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 800044a:	2301      	movs	r3, #1
 800044c:	73bb      	strb	r3, [r7, #14]
	MCAL_GPIO_Init(GPIOA, &PA1_config) ;
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <Pins_init+0x68>)
 8000456:	f7ff feed 	bl	8000234 <MCAL_GPIO_Init>

	// configure PA13 as input floating
	GPIO_PinConfig_t PA13_config ;
	PA13_config.GPIO_PinNumber = GPIO_PIN_13 ;
 800045a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045e:	813b      	strh	r3, [r7, #8]
	PA13_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 8000460:	2301      	movs	r3, #1
 8000462:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(GPIOA, &PA13_config) ;
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	4619      	mov	r1, r3
 800046a:	480f      	ldr	r0, [pc, #60]	; (80004a8 <Pins_init+0x68>)
 800046c:	f7ff fee2 	bl	8000234 <MCAL_GPIO_Init>

	// configure PB1 as output push-pull
	GPIO_PinConfig_t PB1_config ;
	PB1_config.GPIO_PinNumber = GPIO_PIN_1 ;
 8000470:	2302      	movs	r3, #2
 8000472:	80bb      	strh	r3, [r7, #4]
	PB1_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 8000474:	2304      	movs	r3, #4
 8000476:	71bb      	strb	r3, [r7, #6]
	PB1_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000478:	2301      	movs	r3, #1
 800047a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PB1_config) ;
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	480a      	ldr	r0, [pc, #40]	; (80004ac <Pins_init+0x6c>)
 8000482:	f7ff fed7 	bl	8000234 <MCAL_GPIO_Init>

	// configure PB13 as output push-pull
	GPIO_PinConfig_t PB13_config ;
	PB13_config.GPIO_PinNumber = GPIO_PIN_13 ;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	803b      	strh	r3, [r7, #0]
	PB13_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 800048c:	2304      	movs	r3, #4
 800048e:	70bb      	strb	r3, [r7, #2]
	PB13_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000490:	2301      	movs	r3, #1
 8000492:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOB, &PB13_config) ;
 8000494:	463b      	mov	r3, r7
 8000496:	4619      	mov	r1, r3
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <Pins_init+0x6c>)
 800049a:	f7ff fecb 	bl	8000234 <MCAL_GPIO_Init>

}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <main>:
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	clock_init() ;
 80004b6:	f7ff ffaf 	bl	8000418 <clock_init>
	Pins_init() ;
 80004ba:	f7ff ffc1 	bl	8000440 <Pins_init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1) ;        	// LED OFF
 80004be:	2201      	movs	r2, #1
 80004c0:	2102      	movs	r1, #2
 80004c2:	481b      	ldr	r0, [pc, #108]	; (8000530 <main+0x80>)
 80004c4:	f7ff ff78 	bl	80003b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1) ;			// LED OFF
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4818      	ldr	r0, [pc, #96]	; (8000530 <main+0x80>)
 80004d0:	f7ff ff72 	bl	80003b8 <MCAL_GPIO_WritePin>
	int delay = 0 ;
 80004d4:	2300      	movs	r3, #0
 80004d6:	607b      	str	r3, [r7, #4]

	while (1) {
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80004d8:	2102      	movs	r1, #2
 80004da:	4816      	ldr	r0, [pc, #88]	; (8000534 <main+0x84>)
 80004dc:	f7ff ff58 	bl	8000390 <MCAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10b      	bne.n	80004fe <main+0x4e>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1) ;          // Toggle LED on PB1
 80004e6:	2102      	movs	r1, #2
 80004e8:	4811      	ldr	r0, [pc, #68]	; (8000530 <main+0x80>)
 80004ea:	f7ff ff83 	bl	80003f4 <MCAL_GPIO_TogglePin>
			while (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) ;
 80004ee:	bf00      	nop
 80004f0:	2102      	movs	r1, #2
 80004f2:	4810      	ldr	r0, [pc, #64]	; (8000534 <main+0x84>)
 80004f4:	f7ff ff4c 	bl	8000390 <MCAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <main+0x40>
		}

		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) {
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x84>)
 8000504:	f7ff ff44 	bl	8000390 <MCAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d1e4      	bne.n	80004d8 <main+0x28>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13) ;         // Toggle LED on PB13
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x80>)
 8000514:	f7ff ff6e 	bl	80003f4 <MCAL_GPIO_TogglePin>
			for (delay = 0 ; delay < 10000 ; delay ++) ;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e002      	b.n	8000524 <main+0x74>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3301      	adds	r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f242 720f 	movw	r2, #9999	; 0x270f
 800052a:	4293      	cmp	r3, r2
 800052c:	ddf7      	ble.n	800051e <main+0x6e>
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 800052e:	e7d3      	b.n	80004d8 <main+0x28>
 8000530:	40010c00 	.word	0x40010c00
 8000534:	40010800 	.word	0x40010800

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f811 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff ffa1 	bl	80004b0 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800057c:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000580:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000584:	2000001c 	.word	0x2000001c

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2500      	movs	r5, #0
 8000590:	4e0c      	ldr	r6, [pc, #48]	; (80005c4 <__libc_init_array+0x38>)
 8000592:	4c0d      	ldr	r4, [pc, #52]	; (80005c8 <__libc_init_array+0x3c>)
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	42a5      	cmp	r5, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	f000 f81a 	bl	80005d4 <_init>
 80005a0:	2500      	movs	r5, #0
 80005a2:	4e0a      	ldr	r6, [pc, #40]	; (80005cc <__libc_init_array+0x40>)
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <__libc_init_array+0x44>)
 80005a6:	1ba4      	subs	r4, r4, r6
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	42a5      	cmp	r5, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005b4:	4798      	blx	r3
 80005b6:	3501      	adds	r5, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005be:	4798      	blx	r3
 80005c0:	3501      	adds	r5, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
