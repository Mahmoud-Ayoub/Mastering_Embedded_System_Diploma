
Toggle_LEDs_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a95  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000533  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000025ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  64:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
 *  Author: Mahmoud Ayoub
 */ 
#include "DIO_Config.h"

void DIO_SetPinDirection (uint8 PortNumber , uint8 PinNumber , uint8 Direction) {
	switch (PortNumber) {
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	11 f1       	breq	.+68     	; 0xb4 <DIO_SetPinDirection+0x48>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <DIO_SetPinDirection+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	52 c0       	rjmp	.+164    	; 0x120 <DIO_SetPinDirection+0xb4>
  7c:	08 95       	ret
		case portA :
			if (Direction == OUTPUT) {
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
				SET_BIT(DDRA_REG,PinNumber) ; 
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_SetPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_SetPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
			}
			else if (Direction == INPUT) {
  98:	41 11       	cpse	r20, r1
  9a:	5c c0       	rjmp	.+184    	; 0x154 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRA_REG,PinNumber) ; 
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x38>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
			}
		break;
			
		case portB :
			if (Direction == OUTPUT) {
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <DIO_SetPinDirection+0x62>
				SET_BIT(DDRB_REG,PinNumber) ;
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
			}
			else if (Direction == INPUT) {
  ce:	41 11       	cpse	r20, r1
  d0:	41 c0       	rjmp	.+130    	; 0x154 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRB_REG,PinNumber) ;
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDirection+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDirection+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_SetPinDirection+0x98>
				SET_BIT(DDRC_REG,PinNumber) ;
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDirection+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDirection+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
			}
			else if (Direction == INPUT) {
 104:	41 11       	cpse	r20, r1
 106:	26 c0       	rjmp	.+76     	; 0x154 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRC_REG,PinNumber) ;
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0xa4>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
			}
			break;	
			
		case portD :
			if (Direction == OUTPUT) {
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <DIO_SetPinDirection+0xce>
				SET_BIT(DDRD_REG,PinNumber) ;
 124:	21 b3       	in	r18, 0x11	; 17
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0xc0>
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
			}
			else if (Direction == INPUT) {
 13a:	41 11       	cpse	r20, r1
 13c:	0b c0       	rjmp	.+22     	; 0x154 <DIO_SetPinDirection+0xe8>
				CLEAR_BIT(DDRD_REG,PinNumber) ;
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <DIO_SetPinValue>:
		break;	
	}
}

void DIO_SetPinValue (uint8 PortNumber , uint8 PinNumber , uint8 Value) {
	switch (PortNumber) {
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	11 f1       	breq	.+68     	; 0x19e <DIO_SetPinValue+0x48>
 15a:	30 f0       	brcs	.+12     	; 0x168 <DIO_SetPinValue+0x12>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	d1 f1       	breq	.+116    	; 0x1d4 <DIO_SetPinValue+0x7e>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f4       	brne	.+2      	; 0x166 <DIO_SetPinValue+0x10>
 164:	52 c0       	rjmp	.+164    	; 0x20a <DIO_SetPinValue+0xb4>
 166:	08 95       	ret
		case portA :
			if (Value == 1) {
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <DIO_SetPinValue+0x2c>
				SET_BIT(PORTA_REG,PinNumber) ;
 16c:	2b b3       	in	r18, 0x1b	; 27
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinValue+0x22>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinValue+0x1e>
 17c:	82 2b       	or	r24, r18
 17e:	8b bb       	out	0x1b, r24	; 27
 180:	08 95       	ret
			}
			else if (Value == 0) {
 182:	41 11       	cpse	r20, r1
 184:	5c c0       	rjmp	.+184    	; 0x23e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTA_REG,PinNumber) ;
 186:	2b b3       	in	r18, 0x1b	; 27
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinValue+0x3c>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinValue+0x38>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
			}
		break;
		
		case portB :
			if (Value == 1) {
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_SetPinValue+0x62>
				SET_BIT(PORTB_REG,PinNumber) ;
 1a2:	28 b3       	in	r18, 0x18	; 24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPinValue+0x58>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPinValue+0x54>
 1b2:	82 2b       	or	r24, r18
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
			}
			else if (Value == 0) {
 1b8:	41 11       	cpse	r20, r1
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTB_REG,PinNumber) ;
 1bc:	28 b3       	in	r18, 0x18	; 24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinValue+0x72>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinValue+0x6e>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
			}
		break;
		
		case portC :
			if (Value == 1) {
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_SetPinValue+0x98>
				SET_BIT(PORTC_REG,PinNumber) ;
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinValue+0x8e>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinValue+0x8a>
 1e8:	82 2b       	or	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
			}
			else if (Value == 0) {
 1ee:	41 11       	cpse	r20, r1
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTC_REG,PinNumber) ;
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinValue+0xa8>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinValue+0xa4>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
			}
		break;
		
		case portD :
			if (Value == 1) {
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_SetPinValue+0xce>
				SET_BIT(PORTD_REG,PinNumber) ;
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinValue+0xc4>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinValue+0xc0>
 21e:	82 2b       	or	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret
			}
			else if (Value == 0) {
 224:	41 11       	cpse	r20, r1
 226:	0b c0       	rjmp	.+22     	; 0x23e <DIO_SetPinValue+0xe8>
				CLEAR_BIT(PORTD_REG,PinNumber) ;
 228:	22 b3       	in	r18, 0x12	; 18
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinValue+0xde>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinValue+0xda>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret

00000240 <LED_init>:

#include "DIO_Config.h"
#include <util/delay.h>

void LED_init (void) {
	DIO_SetPinDirection(portD , 5 , OUTPUT) ;          // LED 1
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	65 e0       	ldi	r22, 0x05	; 5
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(portD , 6 , OUTPUT) ;		   // LED 2
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	66 e0       	ldi	r22, 0x06	; 6
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(portD , 7 , OUTPUT) ;		   // LED 3
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	67 e0       	ldi	r22, 0x07	; 7
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
	DIO_SetPinValue(portD , 5 , LOW) ;                // OFF initially
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	65 e0       	ldi	r22, 0x05	; 5
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
	DIO_SetPinValue(portD , 6 , LOW) ;
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	66 e0       	ldi	r22, 0x06	; 6
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
	DIO_SetPinValue(portD , 7 , LOW) ;	
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
 27c:	08 95       	ret

0000027e <LEDs_OFF>:
}
void LEDs_OFF (void) {
	DIO_SetPinValue(portD , 5 , LOW) ;                // OFF 
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	65 e0       	ldi	r22, 0x05	; 5
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
	DIO_SetPinValue(portD , 6 , LOW) ;
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	66 e0       	ldi	r22, 0x06	; 6
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
	DIO_SetPinValue(portD , 7 , LOW) ;
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
 29c:	08 95       	ret

0000029e <Buzzer_init>:
}
void Buzzer_init (void) {
	DIO_SetPinDirection(portD , 4 , OUTPUT) ;          // buzzer
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinValue(portD , 4 , LOW) ;                 // OFF initially
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
 2b2:	08 95       	ret

000002b4 <Buzzer_Toggle>:
}
void Buzzer_Toggle (void) {
	DIO_SetPinValue(portD , 4 , HIGH) ;   // buzzer ON
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	64 e0       	ldi	r22, 0x04	; 4
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f e3       	ldi	r18, 0x3F	; 63
 2c0:	8d e0       	ldi	r24, 0x0D	; 13
 2c2:	93 e0       	ldi	r25, 0x03	; 3
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <Buzzer_Toggle+0x10>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Buzzer_Toggle+0x1a>
 2ce:	00 00       	nop
	_delay_ms(1000) ;
	DIO_SetPinValue(portD , 4 , LOW) ;    // buzzer OFF
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
 2da:	08 95       	ret

000002dc <main>:
}


int main(void)
{
	LED_init() ; 
 2dc:	0e 94 20 01 	call	0x240	; 0x240 <LED_init>
	Buzzer_init() ; 
 2e0:	0e 94 4f 01 	call	0x29e	; 0x29e <Buzzer_init>
	DIO_SetPinValue(portD , 4 , LOW) ;    // buzzer OFF
}


int main(void)
{
 2e4:	c5 e0       	ldi	r28, 0x05	; 5
	LED_init() ; 
	Buzzer_init() ; 
    int i = 5 ; 
    while (1) 
    {
		LEDs_OFF() ; 
 2e6:	0e 94 3f 01 	call	0x27e	; 0x27e <LEDs_OFF>
		DIO_SetPinValue(portD , i , HIGH) ; 
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	6c 2f       	mov	r22, r28
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinValue>
 2f4:	2f e3       	ldi	r18, 0x3F	; 63
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x1e>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x28>
 304:	00 00       	nop
 306:	cf 5f       	subi	r28, 0xFF	; 255
		_delay_ms(1000) ; 
		i ++ ; 
		if (i==8) {
 308:	c8 30       	cpi	r28, 0x08	; 8
 30a:	69 f7       	brne	.-38     	; 0x2e6 <main+0xa>
			LEDs_OFF() ; 
 30c:	0e 94 3f 01 	call	0x27e	; 0x27e <LEDs_OFF>
			Buzzer_Toggle() ; 
 310:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Buzzer_Toggle>
 314:	e7 cf       	rjmp	.-50     	; 0x2e4 <main+0x8>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
