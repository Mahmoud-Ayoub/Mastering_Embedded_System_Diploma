
Print_Message_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000368  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e56  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007aa  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004da  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a3  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  7a:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_send_cmd>:
/*
Description : function to send command to LCD
inputs		: command
outputs		: none
*/
void LCD_send_cmd (char cmd) {
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	
	char command ;
	
	command = (PORTA_REG & 0x0F) | (cmd & 0xF0);	// Sending upper nibble
  86:	6b b3       	in	r22, 0x1b	; 27
	DIO_SetPortValue(portA , command) ;
  88:	6f 70       	andi	r22, 0x0F	; 15
  8a:	80 7f       	andi	r24, 0xF0	; 240
  8c:	68 2b       	or	r22, r24
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPortValue>
	CLEAR_BIT (PORTB_REG , Rs) ;					// write command
  94:	c1 98       	cbi	0x18, 1	; 24
	SET_BIT (PORTB_REG , EN) ;						//  E is set high (telling LCD to receive data)
  96:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_send_cmd+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_send_cmd+0x20>
  a2:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTB_REG , EN) ;						// E is set low (telling LCD that we are done sending data)
  a4:	c3 98       	cbi	0x18, 3	; 24
  a6:	83 ec       	ldi	r24, 0xC3	; 195
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_send_cmd+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_send_cmd+0x2e>
  b0:	00 00       	nop
	_delay_ms(10) ; 
	
	command = (PORTA_REG & 0x0F) | (cmd << 4);		// Sending lower nibble
  b2:	6b b3       	in	r22, 0x1b	; 27
	DIO_SetPortValue(portA , command) ;
  b4:	6f 70       	andi	r22, 0x0F	; 15
  b6:	20 e1       	ldi	r18, 0x10	; 16
  b8:	c2 9f       	mul	r28, r18
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	68 2b       	or	r22, r24
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPortValue>
	CLEAR_BIT (PORTB_REG , Rs) ;					// write command
  c6:	c1 98       	cbi	0x18, 1	; 24
	SET_BIT (PORTB_REG , EN) ;						//  E is set high (telling LCD to receive data)
  c8:	c3 9a       	sbi	0x18, 3	; 24
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_send_cmd+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_send_cmd+0x52>
  d4:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTB_REG , EN) ;						// E is set low (telling LCD that we are done sending data)
  d6:	c3 98       	cbi	0x18, 3	; 24
  d8:	83 ec       	ldi	r24, 0xC3	; 195
  da:	99 e0       	ldi	r25, 0x09	; 9
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_send_cmd+0x5a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_send_cmd+0x60>
  e2:	00 00       	nop
	_delay_ms(10) ;
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <LCD_init>:
	DIO_SetPinValue(portA , D4 , OUTPUT) ;
	DIO_SetPinValue(portA , D5 , OUTPUT) ;
	DIO_SetPinValue(portA , D6 , OUTPUT) ;
	DIO_SetPinValue(portA , D7 , OUTPUT) ;
	*/
	DIO_SetPortDirection(portA , OUTPUT) ; 
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_SetPortDirection>
	DIO_SetPortDirection(portB , OUTPUT) ;
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_SetPortDirection>
	// Reset values on LCD Pins
	DIO_SetPinValue(portB, Rs , 0) ;			
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portB, RW , 0) ;
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portB, EN , 0) ;
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portA, D4 , 0) ;
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portA, D5 , 0) ;
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	65 e0       	ldi	r22, 0x05	; 5
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portA, D6 , 0) ;
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	DIO_SetPinValue(portA, D7 , 0) ;
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	67 e0       	ldi	r22, 0x07	; 7
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_SetPinValue>
	            
	LCD_send_cmd(0x33) ;			// needed commands for 4 bits mode   (group of initial commands must be sent to LCD)
 13e:	83 e3       	ldi	r24, 0x33	; 51
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
	LCD_send_cmd(0x32) ;
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
	LCD_send_cmd(0x28) ;
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
	LCD_send_cmd(0x0E) ;
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
	LCD_send_cmd(0x01) ;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	83 ef       	ldi	r24, 0xF3	; 243
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_init+0x78>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_init+0x7e>
 166:	00 00       	nop
	_delay_us(2000) ;
	LCD_send_cmd(0x06) ;
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_cmd>
 16e:	08 95       	ret

00000170 <LCD_send_char>:
/*
Description : function to send character to LCD
inputs		: char data
outputs		: none
*/
void LCD_send_char (char value) {
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	
	char sent_value ; 
	
	sent_value = (PORTA_REG & 0x0F) | (value & 0xF0);/* Sending upper nibble */
 174:	6b b3       	in	r22, 0x1b	; 27
	DIO_SetPortValue(portA , sent_value) ;
 176:	6f 70       	andi	r22, 0x0F	; 15
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	68 2b       	or	r22, r24
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPortValue>
	SET_BIT (PORTB_REG , Rs) ;						// write data
 182:	c1 9a       	sbi	0x18, 1	; 24
	SET_BIT (PORTB_REG , EN) ;						//  E is set high (telling LCD to receive data)
 184:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_send_char+0x1a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_send_char+0x20>
 190:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTB_REG , EN) ;						// E is set low (telling LCD that we are done sending data)
 192:	c3 98       	cbi	0x18, 3	; 24
 194:	83 ec       	ldi	r24, 0xC3	; 195
 196:	99 e0       	ldi	r25, 0x09	; 9
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_send_char+0x28>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_send_char+0x2e>
 19e:	00 00       	nop
	_delay_ms(10) ;
	
	sent_value = (PORTA_REG & 0x0F) | (value << 4);  /* Sending lower nibble */
 1a0:	6b b3       	in	r22, 0x1b	; 27
	DIO_SetPortValue(portA , sent_value) ;
 1a2:	6f 70       	andi	r22, 0x0F	; 15
 1a4:	20 e1       	ldi	r18, 0x10	; 16
 1a6:	c2 9f       	mul	r28, r18
 1a8:	c0 01       	movw	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	68 2b       	or	r22, r24
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPortValue>
	SET_BIT (PORTB_REG , Rs) ;						// write data
 1b4:	c1 9a       	sbi	0x18, 1	; 24
	SET_BIT (PORTB_REG , EN) ;						//  E is set high (telling LCD to receive data)
 1b6:	c3 9a       	sbi	0x18, 3	; 24
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_send_char+0x4c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_send_char+0x52>
 1c2:	00 00       	nop
	_delay_ms(1) ;
	CLEAR_BIT (PORTB_REG , EN) ;						// E is set low (telling LCD that we are done sending data)
 1c4:	c3 98       	cbi	0x18, 3	; 24
 1c6:	83 ec       	ldi	r24, 0xC3	; 195
 1c8:	99 e0       	ldi	r25, 0x09	; 9
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_send_char+0x5a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_send_char+0x60>
 1d0:	00 00       	nop
	_delay_ms(10) ;
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <LCD_send_str>:
/*
Description : function to send string to LCD
inputs		: string data
outputs		: none
*/
void LCD_send_str (char* str) {
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	unsigned int char_index = 0 ; 
	while (str[char_index] != '\0') {
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <LCD_send_str+0x18>
 1e2:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_char(str[char_index]) ; 
 1e4:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_send_char>
inputs		: string data
outputs		: none
*/
void LCD_send_str (char* str) {
	unsigned int char_index = 0 ; 
	while (str[char_index] != '\0') {
 1e8:	89 91       	ld	r24, Y+
 1ea:	81 11       	cpse	r24, r1
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <LCD_send_str+0xe>
		LCD_send_char(str[char_index]) ; 
		char_index ++ ; 
	}	
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 */ 

#include "./HAL/LCD/LCD.h"
int main(void)
{
	LCD_init() ; 
 1f4:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_init>
	LCD_send_str("Learn-In-Depth") ; 
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_send_str>
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0xc>

00000202 <DIO_SetPinValue>:
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
			break ;
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	11 f1       	breq	.+68     	; 0x24a <DIO_SetPinValue+0x48>
 206:	30 f0       	brcs	.+12     	; 0x214 <DIO_SetPinValue+0x12>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	d1 f1       	breq	.+116    	; 0x280 <DIO_SetPinValue+0x7e>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	09 f4       	brne	.+2      	; 0x212 <DIO_SetPinValue+0x10>
 210:	52 c0       	rjmp	.+164    	; 0x2b6 <DIO_SetPinValue+0xb4>
 212:	08 95       	ret
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <DIO_SetPinValue+0x2c>
 218:	2b b3       	in	r18, 0x1b	; 27
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0x22>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0x1e>
 228:	82 2b       	or	r24, r18
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	08 95       	ret
 22e:	41 11       	cpse	r20, r1
 230:	5c c0       	rjmp	.+184    	; 0x2ea <DIO_SetPinValue+0xe8>
 232:	2b b3       	in	r18, 0x1b	; 27
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinValue+0x3c>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinValue+0x38>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	8b bb       	out	0x1b, r24	; 27
 248:	08 95       	ret
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_SetPinValue+0x62>
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinValue+0x58>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinValue+0x54>
 25e:	82 2b       	or	r24, r18
 260:	88 bb       	out	0x18, r24	; 24
 262:	08 95       	ret
 264:	41 11       	cpse	r20, r1
 266:	41 c0       	rjmp	.+130    	; 0x2ea <DIO_SetPinValue+0xe8>
 268:	28 b3       	in	r18, 0x18	; 24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinValue+0x72>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinValue+0x6e>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	59 f4       	brne	.+22     	; 0x29a <DIO_SetPinValue+0x98>
 284:	25 b3       	in	r18, 0x15	; 21
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinValue+0x8e>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinValue+0x8a>
 294:	82 2b       	or	r24, r18
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
 29a:	41 11       	cpse	r20, r1
 29c:	26 c0       	rjmp	.+76     	; 0x2ea <DIO_SetPinValue+0xe8>
 29e:	25 b3       	in	r18, 0x15	; 21
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPinValue+0xa8>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPinValue+0xa4>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	85 bb       	out	0x15, r24	; 21
 2b4:	08 95       	ret
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <DIO_SetPinValue+0xce>
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_SetPinValue+0xc4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_SetPinValue+0xc0>
 2ca:	82 2b       	or	r24, r18
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret
 2d0:	41 11       	cpse	r20, r1
 2d2:	0b c0       	rjmp	.+22     	; 0x2ea <DIO_SetPinValue+0xe8>
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinValue+0xde>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinValue+0xda>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret

000002ec <DIO_SetPortDirection>:
			break ;
	}
}

void DIO_SetPortDirection (uint8 PortNumber , uint8 Direction) {
	switch(PortNumber) {
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	79 f0       	breq	.+30     	; 0x30e <DIO_SetPortDirection+0x22>
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_SetPortDirection+0x10>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	a9 f0       	breq	.+42     	; 0x320 <DIO_SetPortDirection+0x34>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	e1 f0       	breq	.+56     	; 0x332 <DIO_SetPortDirection+0x46>
 2fa:	08 95       	ret
		case portA : 
			if (Direction == OUTPUT) {
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	19 f4       	brne	.+6      	; 0x306 <DIO_SetPortDirection+0x1a>
				DDRA_REG = 0xff ; 
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	8a bb       	out	0x1a, r24	; 26
 304:	08 95       	ret
			}
			else if (Direction == INPUT) {
 306:	61 11       	cpse	r22, r1
 308:	1c c0       	rjmp	.+56     	; 0x342 <DIO_SetPortDirection+0x56>
				DDRA_REG = 0x00 ; 
 30a:	1a ba       	out	0x1a, r1	; 26
 30c:	08 95       	ret
			}
		break;
		
		case portB :
			if (Direction == OUTPUT) {
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	19 f4       	brne	.+6      	; 0x318 <DIO_SetPortDirection+0x2c>
				DDRB_REG = 0xff ;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	87 bb       	out	0x17, r24	; 23
 316:	08 95       	ret
			}
			else if (Direction == INPUT) {
 318:	61 11       	cpse	r22, r1
 31a:	13 c0       	rjmp	.+38     	; 0x342 <DIO_SetPortDirection+0x56>
				DDRB_REG = 0x00 ;
 31c:	17 ba       	out	0x17, r1	; 23
 31e:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	19 f4       	brne	.+6      	; 0x32a <DIO_SetPortDirection+0x3e>
				DDRC_REG = 0xff ;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	84 bb       	out	0x14, r24	; 20
 328:	08 95       	ret
			}
			else if (Direction == INPUT) {
 32a:	61 11       	cpse	r22, r1
 32c:	0a c0       	rjmp	.+20     	; 0x342 <DIO_SetPortDirection+0x56>
				DDRC_REG = 0x00 ;
 32e:	14 ba       	out	0x14, r1	; 20
 330:	08 95       	ret
			}	
		break;
		
		case portD :
			if (Direction == OUTPUT) {
 332:	61 30       	cpi	r22, 0x01	; 1
 334:	19 f4       	brne	.+6      	; 0x33c <DIO_SetPortDirection+0x50>
				DDRD_REG = 0xff ;
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	81 bb       	out	0x11, r24	; 17
 33a:	08 95       	ret
			}
			else if (Direction == INPUT) {
 33c:	61 11       	cpse	r22, r1
 33e:	01 c0       	rjmp	.+2      	; 0x342 <DIO_SetPortDirection+0x56>
				DDRD_REG = 0x00 ;
 340:	11 ba       	out	0x11, r1	; 17
 342:	08 95       	ret

00000344 <DIO_SetPortValue>:
			break;
	}
}

void DIO_SetPortValue (uint8 PortNumber , uint8 Value) {
	switch(PortNumber) {
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	41 f0       	breq	.+16     	; 0x358 <DIO_SetPortValue+0x14>
 348:	28 f0       	brcs	.+10     	; 0x354 <DIO_SetPortValue+0x10>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	39 f0       	breq	.+14     	; 0x35c <DIO_SetPortValue+0x18>
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	39 f0       	breq	.+14     	; 0x360 <DIO_SetPortValue+0x1c>
 352:	08 95       	ret
		case portA :
			PORTA_REG = Value ; 
 354:	6b bb       	out	0x1b, r22	; 27
		break;
 356:	08 95       	ret
		
		case portB :
			PORTB_REG = Value ; 
 358:	68 bb       	out	0x18, r22	; 24
		break;
 35a:	08 95       	ret
		
		case portC :
			PORTC_REG = Value ; 
 35c:	65 bb       	out	0x15, r22	; 21
		break;
 35e:	08 95       	ret
		
		case portD :
			PORTD_REG = Value ; 
 360:	62 bb       	out	0x12, r22	; 18
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
