
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c10  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d5c  08000d5c  00010d64  2**0
                  CONTENTS
  4 .ARM          00000000  08000d5c  08000d5c  00010d64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d5c  08000d64  00010d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d5c  08000d5c  00010d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000d64  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000d64  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d64  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000332a  00000000  00000000  00010d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007bb  00000000  00000000  000140b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000970  00000000  00000000  00014872  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  000151e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015388  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000008ae  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000019c5  00000000  00000000  00015d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000094cd  00000000  00000000  00017753  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020c20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000514  00000000  00000000  00020c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d28 	.word	0x08000d28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d28 	.word	0x08000d28

08000170 <wait_ms>:
 *  Author: Mahmoud-Ayoub
 */ 
#include "LCD.h"


void wait_ms (uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i , j ;
	for (i=0 ; i<time ; i++) {
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for (j=0 ; j<255 ; j++) ;
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for (i=0 ; i<time ; i++) {
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_init>:
/*
Description : function to initialize LCD port , 4 bits mode , and send required commands for initialization
inputs		: none
outputs		: none
 */
void LCD_init (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t RS_config ;
	RS_config.GPIO_PinNumber = Rs ;
 80001ae:	2301      	movs	r3, #1
 80001b0:	82bb      	strh	r3, [r7, #20]
	RS_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 80001b2:	2304      	movs	r3, #4
 80001b4:	75bb      	strb	r3, [r7, #22]
	RS_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001b6:	2301      	movs	r3, #1
 80001b8:	75fb      	strb	r3, [r7, #23]
	MCAL_GPIO_Init(LCD_PORT, &RS_config) ;
 80001ba:	f107 0314 	add.w	r3, r7, #20
 80001be:	4619      	mov	r1, r3
 80001c0:	482a      	ldr	r0, [pc, #168]	; (800026c <LCD_init+0xc4>)
 80001c2:	f000 fc43 	bl	8000a4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN_config ;
	EN_config.GPIO_PinNumber = E ;
 80001c6:	2302      	movs	r3, #2
 80001c8:	823b      	strh	r3, [r7, #16]
	EN_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 80001ca:	2304      	movs	r3, #4
 80001cc:	74bb      	strb	r3, [r7, #18]
	EN_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001ce:	2301      	movs	r3, #1
 80001d0:	74fb      	strb	r3, [r7, #19]
	MCAL_GPIO_Init(LCD_PORT, &EN_config) ;
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	4824      	ldr	r0, [pc, #144]	; (800026c <LCD_init+0xc4>)
 80001da:	f000 fc37 	bl	8000a4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4_config ;
	D4_config.GPIO_PinNumber = D4 ;
 80001de:	2310      	movs	r3, #16
 80001e0:	81bb      	strh	r3, [r7, #12]
	D4_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 80001e2:	2304      	movs	r3, #4
 80001e4:	73bb      	strb	r3, [r7, #14]
	D4_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001e6:	2301      	movs	r3, #1
 80001e8:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(LCD_PORT, &D4_config) ;
 80001ea:	f107 030c 	add.w	r3, r7, #12
 80001ee:	4619      	mov	r1, r3
 80001f0:	481e      	ldr	r0, [pc, #120]	; (800026c <LCD_init+0xc4>)
 80001f2:	f000 fc2b 	bl	8000a4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5_config ;
	D5_config.GPIO_PinNumber = D5 ;
 80001f6:	2320      	movs	r3, #32
 80001f8:	813b      	strh	r3, [r7, #8]
	D5_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 80001fa:	2304      	movs	r3, #4
 80001fc:	72bb      	strb	r3, [r7, #10]
	D5_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80001fe:	2301      	movs	r3, #1
 8000200:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(LCD_PORT, &D5_config) ;
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	4619      	mov	r1, r3
 8000208:	4818      	ldr	r0, [pc, #96]	; (800026c <LCD_init+0xc4>)
 800020a:	f000 fc1f 	bl	8000a4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6_config ;
	D6_config.GPIO_PinNumber = D6 ;
 800020e:	2340      	movs	r3, #64	; 0x40
 8000210:	80bb      	strh	r3, [r7, #4]
	D6_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 8000212:	2304      	movs	r3, #4
 8000214:	71bb      	strb	r3, [r7, #6]
	D6_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000216:	2301      	movs	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_PORT, &D6_config) ;
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4619      	mov	r1, r3
 800021e:	4813      	ldr	r0, [pc, #76]	; (800026c <LCD_init+0xc4>)
 8000220:	f000 fc14 	bl	8000a4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7_config ;
	D7_config.GPIO_PinNumber = D7 ;
 8000224:	2380      	movs	r3, #128	; 0x80
 8000226:	803b      	strh	r3, [r7, #0]
	D7_config.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL ;
 8000228:	2304      	movs	r3, #4
 800022a:	70bb      	strb	r3, [r7, #2]
	D7_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800022c:	2301      	movs	r3, #1
 800022e:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(LCD_PORT, &D7_config) ;
 8000230:	463b      	mov	r3, r7
 8000232:	4619      	mov	r1, r3
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LCD_init+0xc4>)
 8000236:	f000 fc09 	bl	8000a4c <MCAL_GPIO_Init>


	LCD_send_cmd(0x33) ;			// needed commands for 4 bits mode   (group of initial commands must be sent to LCD)
 800023a:	2033      	movs	r0, #51	; 0x33
 800023c:	f000 f818 	bl	8000270 <LCD_send_cmd>
	LCD_send_cmd(0x32) ;
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 f815 	bl	8000270 <LCD_send_cmd>
	LCD_send_cmd(0x28) ;
 8000246:	2028      	movs	r0, #40	; 0x28
 8000248:	f000 f812 	bl	8000270 <LCD_send_cmd>
	LCD_send_cmd(0x0E) ;
 800024c:	200e      	movs	r0, #14
 800024e:	f000 f80f 	bl	8000270 <LCD_send_cmd>
	LCD_send_cmd(0x01) ;
 8000252:	2001      	movs	r0, #1
 8000254:	f000 f80c 	bl	8000270 <LCD_send_cmd>
	wait_ms(2);
 8000258:	2002      	movs	r0, #2
 800025a:	f7ff ff89 	bl	8000170 <wait_ms>
	LCD_send_cmd(0x06) ;
 800025e:	2006      	movs	r0, #6
 8000260:	f000 f806 	bl	8000270 <LCD_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	3718      	adds	r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00

08000270 <LCD_send_cmd>:
/*
Description : function to send command to LCD
inputs		: command
outputs		: none
 */
void LCD_send_cmd (char cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]

	char command ;

	command = (LCD_PORT->ODR & 0x0F) | (cmd & 0xF0);	// Sending upper nibble
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <LCD_send_cmd+0xa0>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	f003 030f 	and.w	r3, r3, #15
 8000284:	b2da      	uxtb	r2, r3
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f023 030f 	bic.w	r3, r3, #15
 800028c:	b2db      	uxtb	r3, r3
 800028e:	4313      	orrs	r3, r2
 8000290:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_WritePort(LCD_PORT, command) ;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	b29b      	uxth	r3, r3
 8000296:	4619      	mov	r1, r3
 8000298:	481d      	ldr	r0, [pc, #116]	; (8000310 <LCD_send_cmd+0xa0>)
 800029a:	f000 fca3 	bl	8000be4 <MCAL_GPIO_WritePort>
	//DIO_SetPortValue(portC , command) ;

	MCAL_GPIO_WritePin(LCD_PORT, Rs, GPIO_PIN_RESET) ;
 800029e:	2200      	movs	r2, #0
 80002a0:	2101      	movs	r1, #1
 80002a2:	481b      	ldr	r0, [pc, #108]	; (8000310 <LCD_send_cmd+0xa0>)
 80002a4:	f000 fc80 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//CLEAR_BIT (PORTC_REG , Rs) ;					// write command

	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_SET) ;
 80002a8:	2201      	movs	r2, #1
 80002aa:	2102      	movs	r1, #2
 80002ac:	4818      	ldr	r0, [pc, #96]	; (8000310 <LCD_send_cmd+0xa0>)
 80002ae:	f000 fc7b 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)

	wait_ms(1) ;
 80002b2:	2001      	movs	r0, #1
 80002b4:	f7ff ff5c 	bl	8000170 <wait_ms>

	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_RESET) ;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2102      	movs	r1, #2
 80002bc:	4814      	ldr	r0, [pc, #80]	; (8000310 <LCD_send_cmd+0xa0>)
 80002be:	f000 fc73 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)

	command = (LCD_PORT->ODR & 0x0F) | (cmd << 4);		// Sending lower nibble
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <LCD_send_cmd+0xa0>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 030f 	and.w	r3, r3, #15
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	4313      	orrs	r3, r2
 80002d6:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_WritePort(LCD_PORT, command) ;
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	b29b      	uxth	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	480c      	ldr	r0, [pc, #48]	; (8000310 <LCD_send_cmd+0xa0>)
 80002e0:	f000 fc80 	bl	8000be4 <MCAL_GPIO_WritePort>
	//DIO_SetPortValue(portC , command) ;

	MCAL_GPIO_WritePin(LCD_PORT, Rs, GPIO_PIN_RESET) ;
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4809      	ldr	r0, [pc, #36]	; (8000310 <LCD_send_cmd+0xa0>)
 80002ea:	f000 fc5d 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//CLEAR_BIT (PORTC_REG , Rs) ;					// write command

	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_SET) ;
 80002ee:	2201      	movs	r2, #1
 80002f0:	2102      	movs	r1, #2
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <LCD_send_cmd+0xa0>)
 80002f4:	f000 fc58 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//SET_BIT (PORTC_REG , E) ;						//  E is set high (telling LCD to receive data)
	wait_ms(1) ;
 80002f8:	2001      	movs	r0, #1
 80002fa:	f7ff ff39 	bl	8000170 <wait_ms>

	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_RESET) ;
 80002fe:	2200      	movs	r2, #0
 8000300:	2102      	movs	r1, #2
 8000302:	4803      	ldr	r0, [pc, #12]	; (8000310 <LCD_send_cmd+0xa0>)
 8000304:	f000 fc50 	bl	8000ba8 <MCAL_GPIO_WritePin>
	//CLEAR_BIT (PORTC_REG , E) ;						// E is set low (telling LCD that we are done sending data)
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40010c00 	.word	0x40010c00

08000314 <LCD_send_char>:
/*
Description : function to send character to LCD
inputs		: char data
outputs		: none
 */
void LCD_send_char (char value) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]

	char sent_value ; 

	sent_value = (LCD_PORT->ODR & 0x0F) | (value & 0xF0);		/* Sending upper nibble */
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <LCD_send_char+0xa0>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 030f 	and.w	r3, r3, #15
 8000328:	b2da      	uxtb	r2, r3
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4313      	orrs	r3, r2
 8000334:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_WritePort(LCD_PORT, sent_value) ;
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	481d      	ldr	r0, [pc, #116]	; (80003b4 <LCD_send_char+0xa0>)
 800033e:	f000 fc51 	bl	8000be4 <MCAL_GPIO_WritePort>

	MCAL_GPIO_WritePin(LCD_PORT, Rs, GPIO_PIN_SET) ;
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	481b      	ldr	r0, [pc, #108]	; (80003b4 <LCD_send_char+0xa0>)
 8000348:	f000 fc2e 	bl	8000ba8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_SET) ;				//  E is set high (telling LCD to receive data)
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <LCD_send_char+0xa0>)
 8000352:	f000 fc29 	bl	8000ba8 <MCAL_GPIO_WritePin>
	wait_ms(1) ;
 8000356:	2001      	movs	r0, #1
 8000358:	f7ff ff0a 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_RESET) ;			// E is set low (telling LCD that we are done sending data)
 800035c:	2200      	movs	r2, #0
 800035e:	2102      	movs	r1, #2
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <LCD_send_char+0xa0>)
 8000362:	f000 fc21 	bl	8000ba8 <MCAL_GPIO_WritePin>


	sent_value = (LCD_PORT->ODR & 0x0F) | (value << 4);		// Sending lower nibble
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <LCD_send_char+0xa0>)
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 030f 	and.w	r3, r3, #15
 8000370:	b2da      	uxtb	r2, r3
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_WritePort(LCD_PORT, sent_value) ;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	b29b      	uxth	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LCD_send_char+0xa0>)
 8000384:	f000 fc2e 	bl	8000be4 <MCAL_GPIO_WritePort>

	MCAL_GPIO_WritePin(LCD_PORT, Rs, GPIO_PIN_SET) ;
 8000388:	2201      	movs	r2, #1
 800038a:	2101      	movs	r1, #1
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <LCD_send_char+0xa0>)
 800038e:	f000 fc0b 	bl	8000ba8 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_SET) ;			//  E is set high (telling LCD to receive data)
 8000392:	2201      	movs	r2, #1
 8000394:	2102      	movs	r1, #2
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <LCD_send_char+0xa0>)
 8000398:	f000 fc06 	bl	8000ba8 <MCAL_GPIO_WritePin>
	wait_ms(1) ;
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff fee7 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_PORT, E, GPIO_PIN_RESET) ;		// E is set low (telling LCD that we are done sending data)
 80003a2:	2200      	movs	r2, #0
 80003a4:	2102      	movs	r1, #2
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <LCD_send_char+0xa0>)
 80003a8:	f000 fbfe 	bl	8000ba8 <MCAL_GPIO_WritePin>

}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <LCD_send_str>:
/*
Description : function to send string to LCD
inputs		: string data
outputs		: none
 */
void LCD_send_str (char* str) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	unsigned int char_index = 0 ; 
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	while (str[char_index] != '\0') {
 80003c4:	e009      	b.n	80003da <LCD_send_str+0x22>
		LCD_send_char(str[char_index]) ; 
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffa0 	bl	8000314 <LCD_send_char>
		char_index ++ ; 
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
	while (str[char_index] != '\0') {
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	4413      	add	r3, r2
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1ef      	bne.n	80003c6 <LCD_send_str+0xe>
	}	
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <LCD_clear>:
/*
Description : function to clear the LCD
inputs		: none
outputs		: none
 */
void LCD_clear (void) {
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
	LCD_send_cmd(0x01) ;         
 80003f2:	2001      	movs	r0, #1
 80003f4:	f7ff ff3c 	bl	8000270 <LCD_send_cmd>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <NVIC_Enable>:
#define AFIO_GPIO_EXTI_MAPPING(x)	((x == GPIOA)?0:\
									(x == GPIOB)?1:\
									(x == GPIOC)?2:\
									(x == GPIOD)?3:0)

void NVIC_Enable (uint16_t IRQ) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d854      	bhi.n	80004b6 <NVIC_Enable+0xba>
 800040c:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <NVIC_Enable+0x18>)
 800040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000412:	bf00      	nop
 8000414:	08000455 	.word	0x08000455
 8000418:	08000463 	.word	0x08000463
 800041c:	08000471 	.word	0x08000471
 8000420:	0800047f 	.word	0x0800047f
 8000424:	0800048d 	.word	0x0800048d
 8000428:	0800049b 	.word	0x0800049b
 800042c:	0800049b 	.word	0x0800049b
 8000430:	0800049b 	.word	0x0800049b
 8000434:	0800049b 	.word	0x0800049b
 8000438:	0800049b 	.word	0x0800049b
 800043c:	080004a9 	.word	0x080004a9
 8000440:	080004a9 	.word	0x080004a9
 8000444:	080004a9 	.word	0x080004a9
 8000448:	080004a9 	.word	0x080004a9
 800044c:	080004a9 	.word	0x080004a9
 8000450:	080004a9 	.word	0x080004a9
	case 0 :
		NVIC_IRQ6_EXTI0_ENABLE() ;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <NVIC_Enable+0xc4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <NVIC_Enable+0xc4>)
 800045a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045e:	6013      	str	r3, [r2, #0]
		break ;
 8000460:	e029      	b.n	80004b6 <NVIC_Enable+0xba>

	case 1 :
		NVIC_IRQ7_EXTI1_ENABLE() ;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <NVIC_Enable+0xc4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <NVIC_Enable+0xc4>)
 8000468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046c:	6013      	str	r3, [r2, #0]
		break ;
 800046e:	e022      	b.n	80004b6 <NVIC_Enable+0xba>

	case 2 :
		NVIC_IRQ8_EXTI2_ENABLE() ;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <NVIC_Enable+0xc4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <NVIC_Enable+0xc4>)
 8000476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047a:	6013      	str	r3, [r2, #0]
		break ;
 800047c:	e01b      	b.n	80004b6 <NVIC_Enable+0xba>

	case 3 :
		NVIC_IRQ9_EXTI3_ENABLE() ;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <NVIC_Enable+0xc4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <NVIC_Enable+0xc4>)
 8000484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000488:	6013      	str	r3, [r2, #0]
		break ;
 800048a:	e014      	b.n	80004b6 <NVIC_Enable+0xba>

	case 4 :
		NVIC_IRQ10_EXTI4_ENABLE() ;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <NVIC_Enable+0xc4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <NVIC_Enable+0xc4>)
 8000492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000496:	6013      	str	r3, [r2, #0]
		break ;
 8000498:	e00d      	b.n	80004b6 <NVIC_Enable+0xba>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_ENABLE() ;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <NVIC_Enable+0xc4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <NVIC_Enable+0xc4>)
 80004a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004a4:	6013      	str	r3, [r2, #0]
		break ;
 80004a6:	e006      	b.n	80004b6 <NVIC_Enable+0xba>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
		NVIC_IRQ40_EXTI10_15_ENABLE() ;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <NVIC_Enable+0xc8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <NVIC_Enable+0xc8>)
 80004ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b2:	6013      	str	r3, [r2, #0]
		break ;
 80004b4:	bf00      	nop
	}
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	e000e100 	.word	0xe000e100
 80004c4:	e000e104 	.word	0xe000e104

080004c8 <NVIC_Disable>:

void NVIC_Disable (uint16_t IRQ) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d854      	bhi.n	8000582 <NVIC_Disable+0xba>
 80004d8:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <NVIC_Disable+0x18>)
 80004da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004de:	bf00      	nop
 80004e0:	08000521 	.word	0x08000521
 80004e4:	0800052f 	.word	0x0800052f
 80004e8:	0800053d 	.word	0x0800053d
 80004ec:	0800054b 	.word	0x0800054b
 80004f0:	08000559 	.word	0x08000559
 80004f4:	08000567 	.word	0x08000567
 80004f8:	08000567 	.word	0x08000567
 80004fc:	08000567 	.word	0x08000567
 8000500:	08000567 	.word	0x08000567
 8000504:	08000567 	.word	0x08000567
 8000508:	08000575 	.word	0x08000575
 800050c:	08000575 	.word	0x08000575
 8000510:	08000575 	.word	0x08000575
 8000514:	08000575 	.word	0x08000575
 8000518:	08000575 	.word	0x08000575
 800051c:	08000575 	.word	0x08000575
	case 0 :
		NVIC_IRQ6_EXTI0_DISABLE() ;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <NVIC_Disable+0xc4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <NVIC_Disable+0xc4>)
 8000526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800052a:	6013      	str	r3, [r2, #0]
		break ;
 800052c:	e029      	b.n	8000582 <NVIC_Disable+0xba>

	case 1 :
		NVIC_IRQ7_EXTI1_DISABLE() ;
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <NVIC_Disable+0xc4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a16      	ldr	r2, [pc, #88]	; (800058c <NVIC_Disable+0xc4>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6013      	str	r3, [r2, #0]
		break ;
 800053a:	e022      	b.n	8000582 <NVIC_Disable+0xba>

	case 2 :
		NVIC_IRQ8_EXTI2_DISABLE() ;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <NVIC_Disable+0xc4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <NVIC_Disable+0xc4>)
 8000542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000546:	6013      	str	r3, [r2, #0]
		break ;
 8000548:	e01b      	b.n	8000582 <NVIC_Disable+0xba>

	case 3 :
		NVIC_IRQ9_EXTI3_DISABLE() ;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <NVIC_Disable+0xc4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0f      	ldr	r2, [pc, #60]	; (800058c <NVIC_Disable+0xc4>)
 8000550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000554:	6013      	str	r3, [r2, #0]
		break ;
 8000556:	e014      	b.n	8000582 <NVIC_Disable+0xba>

	case 4 :
		NVIC_IRQ10_EXTI4_DISABLE() ;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <NVIC_Disable+0xc4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <NVIC_Disable+0xc4>)
 800055e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000562:	6013      	str	r3, [r2, #0]
		break ;
 8000564:	e00d      	b.n	8000582 <NVIC_Disable+0xba>
	case 5 :
	case 6 :
	case 7 :
	case 8 :
	case 9 :
		NVIC_IRQ23_EXTI5_9_DISABLE() ;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <NVIC_Disable+0xc4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <NVIC_Disable+0xc4>)
 800056c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000570:	6013      	str	r3, [r2, #0]
		break ;
 8000572:	e006      	b.n	8000582 <NVIC_Disable+0xba>
	case 11 :
	case 12 :
	case 13 :
	case 14 :
	case 15 :
		NVIC_IRQ40_EXTI10_15_DISABLE() ;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <NVIC_Disable+0xc8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <NVIC_Disable+0xc8>)
 800057a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057e:	6013      	str	r3, [r2, #0]
		break ;
 8000580:	bf00      	nop
	}
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	e000e180 	.word	0xe000e180
 8000590:	e000e184 	.word	0xe000e184

08000594 <EXTI_Update>:

void EXTI_Update (EXTI_PinConfig_t* EXTI_Config) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	// configure GPIO as alternative function input
	GPIO_PinConfig_t PinConfig ;
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin ;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	891b      	ldrh	r3, [r3, #8]
 80005a0:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 80005a2:	2301      	movs	r3, #1
 80005a4:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinConfig) ;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f107 0208 	add.w	r2, r7, #8
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fa4b 	bl	8000a4c <MCAL_GPIO_Init>

	// configure AFIO
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.EXTI_InputLineNumber / 4 ;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	089b      	lsrs	r3, r3, #2
 80005bc:	b29b      	uxth	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = ( EXTI_Config->EXTI_Pin.EXTI_InputLineNumber % 4 ) * 4 ;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 0303 	and.w	r3, r3, #3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	73bb      	strb	r3, [r7, #14]

	AFIO->EXTICR[AFIO_EXTICR_index] &= ~ (0xF << AFIO_EXTICR_position) ;
 80005d0:	4a5f      	ldr	r2, [pc, #380]	; (8000750 <EXTI_Update+0x1bc>)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3302      	adds	r3, #2
 80005d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	210f      	movs	r1, #15
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	495a      	ldr	r1, [pc, #360]	; (8000750 <EXTI_Update+0x1bc>)
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4002      	ands	r2, r0
 80005ec:	3302      	adds	r3, #2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= (( AFIO_GPIO_EXTI_MAPPING(EXTI_Config->EXTI_Pin.GPIO_Port) & 0xF ) << AFIO_EXTICR_position ) ;
 80005f2:	4a57      	ldr	r2, [pc, #348]	; (8000750 <EXTI_Update+0x1bc>)
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4954      	ldr	r1, [pc, #336]	; (8000754 <EXTI_Update+0x1c0>)
 8000602:	428b      	cmp	r3, r1
 8000604:	d016      	beq.n	8000634 <EXTI_Update+0xa0>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4953      	ldr	r1, [pc, #332]	; (8000758 <EXTI_Update+0x1c4>)
 800060c:	428b      	cmp	r3, r1
 800060e:	d00f      	beq.n	8000630 <EXTI_Update+0x9c>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4951      	ldr	r1, [pc, #324]	; (800075c <EXTI_Update+0x1c8>)
 8000616:	428b      	cmp	r3, r1
 8000618:	d008      	beq.n	800062c <EXTI_Update+0x98>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4950      	ldr	r1, [pc, #320]	; (8000760 <EXTI_Update+0x1cc>)
 8000620:	428b      	cmp	r3, r1
 8000622:	d101      	bne.n	8000628 <EXTI_Update+0x94>
 8000624:	2303      	movs	r3, #3
 8000626:	e006      	b.n	8000636 <EXTI_Update+0xa2>
 8000628:	2300      	movs	r3, #0
 800062a:	e004      	b.n	8000636 <EXTI_Update+0xa2>
 800062c:	2302      	movs	r3, #2
 800062e:	e002      	b.n	8000636 <EXTI_Update+0xa2>
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <EXTI_Update+0xa2>
 8000634:	2300      	movs	r3, #0
 8000636:	7bb9      	ldrb	r1, [r7, #14]
 8000638:	408b      	lsls	r3, r1
 800063a:	4618      	mov	r0, r3
 800063c:	4944      	ldr	r1, [pc, #272]	; (8000750 <EXTI_Update+0x1bc>)
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4302      	orrs	r2, r0
 8000642:	3302      	adds	r3, #2
 8000644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// configure edge triggering
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 8000648:	4b46      	ldr	r3, [pc, #280]	; (8000764 <EXTI_Update+0x1d0>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	8812      	ldrh	r2, [r2, #0]
 8000650:	4611      	mov	r1, r2
 8000652:	2201      	movs	r2, #1
 8000654:	408a      	lsls	r2, r1
 8000656:	43d2      	mvns	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a42      	ldr	r2, [pc, #264]	; (8000764 <EXTI_Update+0x1d0>)
 800065c:	400b      	ands	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 8000660:	4b40      	ldr	r3, [pc, #256]	; (8000764 <EXTI_Update+0x1d0>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	43d2      	mvns	r2, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4a3c      	ldr	r2, [pc, #240]	; (8000764 <EXTI_Update+0x1d0>)
 8000674:	400b      	ands	r3, r1
 8000676:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger == EXTI_Trigger_RISING) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7b1b      	ldrb	r3, [r3, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d10b      	bne.n	8000698 <EXTI_Update+0x104>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 8000680:	4b38      	ldr	r3, [pc, #224]	; (8000764 <EXTI_Update+0x1d0>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	8812      	ldrh	r2, [r2, #0]
 8000688:	4611      	mov	r1, r2
 800068a:	2201      	movs	r2, #1
 800068c:	408a      	lsls	r2, r1
 800068e:	4611      	mov	r1, r2
 8000690:	4a34      	ldr	r2, [pc, #208]	; (8000764 <EXTI_Update+0x1d0>)
 8000692:	430b      	orrs	r3, r1
 8000694:	6093      	str	r3, [r2, #8]
 8000696:	e029      	b.n	80006ec <EXTI_Update+0x158>
	}
	else if (EXTI_Config->Trigger == EXTI_Trigger_FALLING) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7b1b      	ldrb	r3, [r3, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d10b      	bne.n	80006b8 <EXTI_Update+0x124>
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 80006a0:	4b30      	ldr	r3, [pc, #192]	; (8000764 <EXTI_Update+0x1d0>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	8812      	ldrh	r2, [r2, #0]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a2c      	ldr	r2, [pc, #176]	; (8000764 <EXTI_Update+0x1d0>)
 80006b2:	430b      	orrs	r3, r1
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	e019      	b.n	80006ec <EXTI_Update+0x158>
	}
	else if (EXTI_Config->Trigger == EXTI_Trigger_ANYCHANGE) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7b1b      	ldrb	r3, [r3, #12]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d115      	bne.n	80006ec <EXTI_Update+0x158>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <EXTI_Update+0x1d0>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	408a      	lsls	r2, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a24      	ldr	r2, [pc, #144]	; (8000764 <EXTI_Update+0x1d0>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <EXTI_Update+0x1d0>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	8812      	ldrh	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	2201      	movs	r2, #1
 80006e2:	408a      	lsls	r2, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <EXTI_Update+0x1d0>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	60d3      	str	r3, [r2, #12]
	}

	// update IRQ handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <EXTI_Update+0x1d4>)
 80006f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Enable / Disable Interrupt_MASK & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7b5b      	ldrb	r3, [r3, #13]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d110      	bne.n	8000726 <EXTI_Update+0x192>
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <EXTI_Update+0x1d0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <EXTI_Update+0x1d0>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6013      	str	r3, [r2, #0]
		NVIC_Enable (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe6c 	bl	80003fc <NVIC_Enable>
	}
	else {
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
		NVIC_Disable (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
	}
}
 8000724:	e010      	b.n	8000748 <EXTI_Update+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <EXTI_Update+0x1d0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	2201      	movs	r2, #1
 8000732:	408a      	lsls	r2, r1
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <EXTI_Update+0x1d0>)
 800073a:	400b      	ands	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
		NVIC_Disable (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber) ;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fec0 	bl	80004c8 <NVIC_Disable>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010000 	.word	0x40010000
 8000754:	40010800 	.word	0x40010800
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40011000 	.word	0x40011000
 8000760:	40011400 	.word	0x40011400
 8000764:	40010400 	.word	0x40010400
 8000768:	2000001c 	.word	0x2000001c

0800076c <MCAL_EXTI_Init>:
 * 		@param[in]		-	Config (EXTI_GPIO_Mapping_t @ref EXTI_define , uint8_t Trigger @ref EXTI_Trigger_define , uint8_t IRQ_EN @ref EXTI_IRQ_EN_define)
 * 		@param[out]		-	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_EXTI_Init (EXTI_PinConfig_t* EXTI_Config) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	EXTI_Update (EXTI_Config) ;
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff0d 	bl	8000594 <EXTI_Update>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE() ;
	NVIC_IRQ40_EXTI10_15_DISABLE() ;
}

// ----------------------------------------- ISR Functions -----------------------------------------
void EXTI0_IRQHandler (void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 0) ;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <EXTI0_IRQHandler+0x1c>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <EXTI0_IRQHandler+0x1c>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]() ;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <EXTI0_IRQHandler+0x20>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4798      	blx	r3

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010400 	.word	0x40010400
 80007a4:	2000001c 	.word	0x2000001c

080007a8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 1) ;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <EXTI1_IRQHandler+0x1c>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <EXTI1_IRQHandler+0x1c>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]() ;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <EXTI1_IRQHandler+0x20>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	4798      	blx	r3
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010400 	.word	0x40010400
 80007c8:	2000001c 	.word	0x2000001c

080007cc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 2) ;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <EXTI2_IRQHandler+0x1c>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <EXTI2_IRQHandler+0x1c>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]() ;
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <EXTI2_IRQHandler+0x20>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	4798      	blx	r3
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40010400 	.word	0x40010400
 80007ec:	2000001c 	.word	0x2000001c

080007f0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 3) ;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <EXTI3_IRQHandler+0x1c>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <EXTI3_IRQHandler+0x1c>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]() ;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <EXTI3_IRQHandler+0x20>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4798      	blx	r3
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010400 	.word	0x40010400
 8000810:	2000001c 	.word	0x2000001c

08000814 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 4) ;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <EXTI4_IRQHandler+0x1c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <EXTI4_IRQHandler+0x1c>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]() ;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <EXTI4_IRQHandler+0x20>)
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	4798      	blx	r3
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010400 	.word	0x40010400
 8000834:	2000001c 	.word	0x2000001c

08000838 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	2b00      	cmp	r3, #0
 8000846:	d008      	beq.n	800085a <EXTI9_5_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 5) ;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[5]() ;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <EXTI9_5_IRQHandler+0xa4>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 6)) {
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	2b00      	cmp	r3, #0
 8000864:	d008      	beq.n	8000878 <EXTI9_5_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 6) ;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[6]() ;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <EXTI9_5_IRQHandler+0xa4>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 7)) {
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000880:	2b00      	cmp	r3, #0
 8000882:	d008      	beq.n	8000896 <EXTI9_5_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 7) ;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 800088a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088e:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[7]() ;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <EXTI9_5_IRQHandler+0xa4>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 8)) {
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <EXTI9_5_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 8) ;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 80008a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ac:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[8]() ;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <EXTI9_5_IRQHandler+0xa4>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 9)) {
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d008      	beq.n	80008d2 <EXTI9_5_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 9) ;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[9]() ;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <EXTI9_5_IRQHandler+0xa4>)
 80008ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d0:	4798      	blx	r3
	}
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010400 	.word	0x40010400
 80008dc:	2000001c 	.word	0x2000001c

080008e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <EXTI15_10_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 10) ;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[10]() ;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <EXTI15_10_IRQHandler+0xa4>)
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 11)) {
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090a:	2b00      	cmp	r3, #0
 800090c:	d008      	beq.n	8000920 <EXTI15_10_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 11) ;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000918:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[11]() ;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <EXTI15_10_IRQHandler+0xa4>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 12)) {
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <EXTI15_10_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 12) ;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000932:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000936:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[12]() ;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <EXTI15_10_IRQHandler+0xa4>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 13)) {
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d008      	beq.n	800095c <EXTI15_10_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 13) ;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 8000950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000954:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[13]() ;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <EXTI15_10_IRQHandler+0xa4>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 14)) {
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d008      	beq.n	800097a <EXTI15_10_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 14) ;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <EXTI15_10_IRQHandler+0xa0>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000972:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[14]() ;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <EXTI15_10_IRQHandler+0xa4>)
 8000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000978:	4798      	blx	r3
	}
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010400 	.word	0x40010400
 8000984:	2000001c 	.word	0x2000001c

08000988 <GPIO_CRLH_GetPosition>:
 *
 *      Author: Mahmoud Ayoub
 */
#include "GPIO.h"

static GPIO_CRLH_GetPosition (uint16_t PinNumber) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	2b80      	cmp	r3, #128	; 0x80
 8000996:	d042      	beq.n	8000a1e <GPIO_CRLH_GetPosition+0x96>
 8000998:	2b80      	cmp	r3, #128	; 0x80
 800099a:	dc11      	bgt.n	80009c0 <GPIO_CRLH_GetPosition+0x38>
 800099c:	2b08      	cmp	r3, #8
 800099e:	d036      	beq.n	8000a0e <GPIO_CRLH_GetPosition+0x86>
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	dc06      	bgt.n	80009b2 <GPIO_CRLH_GetPosition+0x2a>
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d02e      	beq.n	8000a06 <GPIO_CRLH_GetPosition+0x7e>
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d02e      	beq.n	8000a0a <GPIO_CRLH_GetPosition+0x82>
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d028      	beq.n	8000a02 <GPIO_CRLH_GetPosition+0x7a>
 80009b0:	e047      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
 80009b2:	2b20      	cmp	r3, #32
 80009b4:	d02f      	beq.n	8000a16 <GPIO_CRLH_GetPosition+0x8e>
 80009b6:	2b40      	cmp	r3, #64	; 0x40
 80009b8:	d02f      	beq.n	8000a1a <GPIO_CRLH_GetPosition+0x92>
 80009ba:	2b10      	cmp	r3, #16
 80009bc:	d029      	beq.n	8000a12 <GPIO_CRLH_GetPosition+0x8a>
 80009be:	e040      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
 80009c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009c4:	d033      	beq.n	8000a2e <GPIO_CRLH_GetPosition+0xa6>
 80009c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ca:	dc09      	bgt.n	80009e0 <GPIO_CRLH_GetPosition+0x58>
 80009cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009d0:	d029      	beq.n	8000a26 <GPIO_CRLH_GetPosition+0x9e>
 80009d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009d6:	d028      	beq.n	8000a2a <GPIO_CRLH_GetPosition+0xa2>
 80009d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009dc:	d021      	beq.n	8000a22 <GPIO_CRLH_GetPosition+0x9a>
 80009de:	e030      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
 80009e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e4:	d027      	beq.n	8000a36 <GPIO_CRLH_GetPosition+0xae>
 80009e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ea:	dc03      	bgt.n	80009f4 <GPIO_CRLH_GetPosition+0x6c>
 80009ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009f0:	d01f      	beq.n	8000a32 <GPIO_CRLH_GetPosition+0xaa>
 80009f2:	e026      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
 80009f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009f8:	d01f      	beq.n	8000a3a <GPIO_CRLH_GetPosition+0xb2>
 80009fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009fe:	d01e      	beq.n	8000a3e <GPIO_CRLH_GetPosition+0xb6>
 8000a00:	e01f      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
	case GPIO_PIN_0 :
		return 0 ;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e01d      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 8000a06:	2304      	movs	r3, #4
 8000a08:	e01b      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e019      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	e017      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000a12:	2310      	movs	r3, #16
 8000a14:	e015      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8000a16:	2314      	movs	r3, #20
 8000a18:	e013      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	e011      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000a1e:	231c      	movs	r3, #28
 8000a20:	e00f      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e00d      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000a26:	2304      	movs	r3, #4
 8000a28:	e00b      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	e009      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	e007      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000a32:	2310      	movs	r3, #16
 8000a34:	e005      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000a36:	2314      	movs	r3, #20
 8000a38:	e003      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000a3a:	2318      	movs	r3, #24
 8000a3c:	e001      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000a3e:	231c      	movs	r3, #28
 8000a40:	e7ff      	b.n	8000a42 <GPIO_CRLH_GetPosition+0xba>
		break ;
	}
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <MCAL_GPIO_Init>:
 * 		@return value	-	none
 * 		Note			-	STM32F103C6 has GPIO A,B,C,D,E,F,G Modules
 * 							But LQFP48 Package has only GPIO A , B , part of C , part of D
 *
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig) {
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]

	uint8_t Pin_Config_Value = 0 ;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]

	// Port Configuration register Low (GPIOx_CRL) configure PINS from 0 to 7
	// Port Configuration register High (GPIOx_CRH) configure PINS from 8 to 15
	volatile uint32_t* ConfigReg = NULL ;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	2bff      	cmp	r3, #255	; 0xff
 8000a64:	d801      	bhi.n	8000a6a <MCAL_GPIO_Init+0x1e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	e001      	b.n	8000a6e <MCAL_GPIO_Init+0x22>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	60bb      	str	r3, [r7, #8]

	// clear CNF and MODE
	(*ConfigReg) &= ~ (0xF << GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff87 	bl	8000988 <GPIO_CRLH_GetPosition>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	43da      	mvns	r2, r3
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	401a      	ands	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN) || (PinConfig->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPEN_DRAIN) ) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	d00b      	beq.n	8000aac <MCAL_GPIO_Init+0x60>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d007      	beq.n	8000aac <MCAL_GPIO_Init+0x60>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d003      	beq.n	8000aac <MCAL_GPIO_Init+0x60>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	d11c      	bne.n	8000ae6 <MCAL_GPIO_Init+0x9a>
		// Set CNF and MODE
		Pin_Config_Value = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	b25a      	sxtb	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	73fb      	strb	r3, [r7, #15]
		(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000ac8:	7bfc      	ldrb	r4, [r7, #15]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff5a 	bl	8000988 <GPIO_CRLH_GetPosition>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	fa04 f203 	lsl.w	r2, r4, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e05c      	b.n	8000ba0 <MCAL_GPIO_Init+0x154>
	}
	// if pin is input
	else {
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)) {
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	789b      	ldrb	r3, [r3, #2]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d003      	beq.n	8000af6 <MCAL_GPIO_Init+0xaa>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	789b      	ldrb	r3, [r3, #2]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d115      	bne.n	8000b22 <MCAL_GPIO_Init+0xd6>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	789b      	ldrb	r3, [r3, #2]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000b04:	7bfc      	ldrb	r4, [r7, #15]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff3c 	bl	8000988 <GPIO_CRLH_GetPosition>
 8000b10:	4603      	mov	r3, r0
 8000b12:	fa04 f203 	lsl.w	r2, r4, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e03e      	b.n	8000ba0 <MCAL_GPIO_Init+0x154>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) {
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d115      	bne.n	8000b56 <MCAL_GPIO_Init+0x10a>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	789b      	ldrb	r3, [r3, #2]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000b38:	7bfc      	ldrb	r4, [r7, #15]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff22 	bl	8000988 <GPIO_CRLH_GetPosition>
 8000b44:	4603      	mov	r3, r0
 8000b46:	fa04 f203 	lsl.w	r2, r4, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	601a      	str	r2, [r3, #0]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;

		}
	}

}
 8000b54:	e024      	b.n	8000ba0 <MCAL_GPIO_Init+0x154>
			Pin_Config_Value = ( (((GPIO_MODE_INPUT_PULL_UP) << 2) | (0x0)) & 0x0F ) ;
 8000b56:	2308      	movs	r3, #8
 8000b58:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULL_UP) {
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d107      	bne.n	8000b72 <MCAL_GPIO_Init+0x126>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	e007      	b.n	8000b82 <MCAL_GPIO_Init+0x136>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	8812      	ldrh	r2, [r2, #0]
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60da      	str	r2, [r3, #12]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000b82:	7bfc      	ldrb	r4, [r7, #15]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fefd 	bl	8000988 <GPIO_CRLH_GetPosition>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	fa04 f203 	lsl.w	r2, r4, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	e7ff      	b.n	8000ba0 <MCAL_GPIO_Init+0x154>
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <MCAL_GPIO_WritePin>:
 * 		@param[in]		-	Value required to be written on the specified pin
 * 		@param[out]		- 	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET) {
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= ((uint32_t)PinNumber) ;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60da      	str	r2, [r3, #12]
	}
	else {
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
	}
}
 8000bca:	e006      	b.n	8000bda <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60da      	str	r2, [r3, #12]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <MCAL_GPIO_WritePort>:
 * 		@param[in]		-	Value required to be written on the specified port
 * 		@param[out]		- 	none
 * 		@return value	-	none
 * 		Note			-	none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx , uint16_t Value) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000bf0:	887a      	ldrh	r2, [r7, #2]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60da      	str	r2, [r3, #12]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <clock_init>:
#include "STM32F103C6.h"
#include "LCD.h"
#include "Keypad.h"
#include "EXTI.h"

void clock_init (void) {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	CLK_EN_GPIOA() ;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <clock_init+0x30>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <clock_init+0x30>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
	CLK_EN_GPIOB() ;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <clock_init+0x30>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <clock_init+0x30>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
	CLK_EN_AFIO() ;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <clock_init+0x30>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <clock_init+0x30>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <IRQ9_CB>:
void IRQ9_CB (void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	LCD_send_str("EXTI9 Happened") ;
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <IRQ9_CB+0x1c>)
 8000c3a:	f7ff fbbd 	bl	80003b8 <LCD_send_str>
	wait_ms(1000) ;
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f7ff fa95 	bl	8000170 <wait_ms>
	LCD_clear() ;
 8000c46:	f7ff fbd2 	bl	80003ee <LCD_clear>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08000d40 	.word	0x08000d40

08000c54 <main>:
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
	clock_init() ;
 8000c5a:	f7ff ffd1 	bl	8000c00 <clock_init>
	LCD_init() ;
 8000c5e:	f7ff faa3 	bl	80001a8 <LCD_init>


	EXTI_PinConfig_t EXTI_cfg ;
	EXTI_cfg.EXTI_Pin = EXTI9PB9 ;
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <main+0x30>)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger =  EXTI_Trigger_RISING	;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.P_IRQ_CallBack = IRQ9_CB ;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <main+0x34>)
 8000c72:	617b      	str	r3, [r7, #20]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_ENABLE ;
 8000c74:	2301      	movs	r3, #1
 8000c76:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_Init(&EXTI_cfg) ;
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fd76 	bl	800076c <MCAL_EXTI_Init>
	while (1) {
 8000c80:	e7fe      	b.n	8000c80 <main+0x2c>
 8000c82:	bf00      	nop
 8000c84:	08000d50 	.word	0x08000d50
 8000c88:	08000c35 	.word	0x08000c35

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	; (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cba:	f000 f811 	bl	8000ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff ffc9 	bl	8000c54 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cd0:	08000d64 	.word	0x08000d64
  ldr r2, =_sbss
 8000cd4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cd8:	20000058 	.word	0x20000058

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>
	...

08000ce0 <__libc_init_array>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	4e0c      	ldr	r6, [pc, #48]	; (8000d18 <__libc_init_array+0x38>)
 8000ce6:	4c0d      	ldr	r4, [pc, #52]	; (8000d1c <__libc_init_array+0x3c>)
 8000ce8:	1ba4      	subs	r4, r4, r6
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	42a5      	cmp	r5, r4
 8000cee:	d109      	bne.n	8000d04 <__libc_init_array+0x24>
 8000cf0:	f000 f81a 	bl	8000d28 <_init>
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	4e0a      	ldr	r6, [pc, #40]	; (8000d20 <__libc_init_array+0x40>)
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <__libc_init_array+0x44>)
 8000cfa:	1ba4      	subs	r4, r4, r6
 8000cfc:	10a4      	asrs	r4, r4, #2
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d105      	bne.n	8000d0e <__libc_init_array+0x2e>
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d08:	4798      	blx	r3
 8000d0a:	3501      	adds	r5, #1
 8000d0c:	e7ee      	b.n	8000cec <__libc_init_array+0xc>
 8000d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d12:	4798      	blx	r3
 8000d14:	3501      	adds	r5, #1
 8000d16:	e7f2      	b.n	8000cfe <__libc_init_array+0x1e>
 8000d18:	08000d5c 	.word	0x08000d5c
 8000d1c:	08000d5c 	.word	0x08000d5c
 8000d20:	08000d5c 	.word	0x08000d5c
 8000d24:	08000d60 	.word	0x08000d60

08000d28 <_init>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr

08000d34 <_fini>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr
